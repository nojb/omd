<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><icon>http://ocaml.org/img/colour-icon-170x148.png</icon><generator uri="https://github.com/Cumulus/Syndic" version="1.5.3">OCaml Syndic.Atom feed aggregator</generator><id>urn:md5:2841294131eb492cfabfaa5ed87d08d3</id><title type="text">OCaml Planet</title><updated>2018-09-26T00:00:00-00:00</updated><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/147.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">
&lt;p&gt;The &lt;a href=&quot;https://github.com/coq/coq/releases/tag/V8.8.2&quot;&gt;8.8.2 release of Coq&lt;/a&gt; is available.&lt;/p&gt;
&lt;p&gt;Main changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The kernel does not tolerate capture of global universes by polymorphic universe binders, fixing a soundness break (triggered only through custom plugins)&lt;/li&gt;
&lt;li&gt;A PDF version of the reference manual is available once again.&lt;/li&gt;
&lt;li&gt;The coq-makefile targets &lt;code&gt;print-pretty-timed&lt;/code&gt;, &lt;code&gt;print-pretty-timed-diff&lt;/code&gt;, and &lt;code&gt;print-pretty-single-time-diff&lt;/code&gt; now correctly label the &quot;before&quot; and &quot;after&quot; columns, rather than swapping them.&lt;/li&gt;
&lt;li&gt;The Windows installer now includes many more external packages that can be individually selected for installation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many other bug fixes and lots of documentation improvements (for details, see the &lt;a href=&quot;https://github.com/coq/coq/milestone/15?closed=1&quot;&gt;8.8.2 milestone&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Feedback and &lt;a href=&quot;https://github.com/coq/coq/issues&quot;&gt;bug reports&lt;/a&gt; are extremely welcome.&lt;/p&gt;

 </content><id>https://coq.inria.fr/news/147.html</id><title type="text">Coq 8.8.2 is out</title><updated>2018-09-26T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2018-09-19T08:03:33-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.8</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/09/19/opam-2-0-0-release-and-repository-upgrade/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/09/19/opam-2-0-0-release-and-repository-upgrade/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;We are happy to announce the final release of &lt;a href=&quot;https://github.com/ocaml/opam/releases/tag/2.0.0&quot;&gt;opam 2.0.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few weeks ago, we released a &lt;a href=&quot;https://opam.ocaml.org/blog/opam-2-0-0-rc4&quot;&gt;last release candidate&lt;/a&gt; to be later promoted to 2.0.0, synchronised with the &lt;a href=&quot;https://github.com/ocaml/opam-repository&quot;&gt;opam package repository&lt;/a&gt; &lt;a href=&quot;https://opam.ocaml.org/blog/opam-2-0-0-repo-upgrade-roadmap/&quot;&gt;upgrade&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You are encouraged to update as soon as you see fit, to continue to get package updates: opam 2.0.0 supports the older formats, and 1.2.2 will no longer get regular updates. See the &lt;a href=&quot;http://opam.ocaml.org/2.0-preview/doc/Upgrade_guide.html&quot;&gt;Upgrade Guide&lt;/a&gt; for details about the new features and changes.&lt;/p&gt;
&lt;p&gt;The website opam.ocaml.org has been updated, with the full 2.0.0 documentation pages. You can still find the documentation for the previous versions in the corresponding menu.&lt;/p&gt;
&lt;p&gt;Package maintainers should be aware of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the master branch of the &lt;a href=&quot;https://github.com/ocaml/opam-repository&quot;&gt;opam package repository&lt;/a&gt; is now in the 2.0.0 format&lt;/li&gt;
&lt;li&gt;package submissions must accordingly be made in the 2.0.0 format, or using the new version of &lt;code&gt;opam-publish&lt;/code&gt; (2.0.0)&lt;/li&gt;
&lt;li&gt;anything that was merged into the repository in 1.2 format has been automatically updated to the 2.0.0 format&lt;/li&gt;
&lt;li&gt;the 1.2 format repository has been forked to its own branch, and will only be updated for critical fixes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For custom repositories, the &lt;a href=&quot;https://opam.ocaml.org/blog/opam-2-0-0-repo-upgrade-roadmap/#Advice-for-custom-repository-maintainers&quot;&gt;advice&lt;/a&gt; remains the same.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Installation instructions (unchanged):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From binaries: run
&lt;pre&gt;&lt;code&gt;sh &amp;lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or download manually from &lt;a href=&quot;https://github.com/ocaml/opam/releases/tag/2.0.0&quot;&gt;the Github &amp;#8220;Releases&amp;#8221; page&lt;/a&gt; to your PATH. In this case, don&amp;#8217;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed.&lt;/li&gt;
&lt;li&gt;From source, using opam:
&lt;pre&gt;&lt;code&gt;opam update; opam install opam-devel&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(then copy the opam binary to your PATH as explained, and don&amp;#8217;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed)&lt;/li&gt;
&lt;li&gt;From source, manually: see the instructions in the &lt;a href=&quot;https://github.com/ocaml/opam/tree/2.0.0-rc4#compiling-this-repo&quot;&gt;README&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We hope you enjoy this new major version, and remain open to &lt;a href=&quot;https://github.com/ocaml/opam/issues&quot;&gt;bug reports&lt;/a&gt; and &lt;a href=&quot;https://github.com/ocaml/opam/issues&quot;&gt;suggestions&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NOTE: this article is cross-posted on &lt;a href=&quot;https://opam.ocaml.org/blog/&quot;&gt;opam.ocaml.org&lt;/a&gt; and &lt;a href=&quot;http://www.ocamlpro.com/category/blog/&quot;&gt;ocamlpro.com&lt;/a&gt;. Please head to the latter for the comments!&lt;/p&gt;&lt;/blockquote&gt;
</content><category term="OPAM"/><id>http://www.ocamlpro.com/?p=1128</id><title type="text">opam 2.0.0 release and repository upgrade</title><updated>2018-09-19T08:03:33-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-09-28T16:38:37-00:00</updated><link href="http://kcsrk.info/" rel="alternate"/><link href="http://kcsrk.info/atom.xml" rel="self"/><id>http://kcsrk.info</id><title type="text">OCaml feed from KC Sivaramakrishnan</title><author><email>sk826@cl.cam.ac.uk</email><name>KC Sivaramakrishnan</name></author></source><link href="http://kcsrk.info/multicore/ocaml/benchmarks/2018/09/13/1543-multicore-ci/" rel="alternate"/><content xml:base="http://kcsrk.info/atom-ocaml.xml" type="html">&lt;p&gt;Over the past few weeks, at &lt;a href=&quot;http://ocamllabs.io/&quot;&gt;OCaml Labs&lt;/a&gt;, we’ve deployed
continuous benchmarking infrastructure for &lt;a href=&quot;https://github.com/ocamllabs/ocaml-multicore&quot;&gt;Multicore
OCaml&lt;/a&gt;. Live results are available
at &lt;a href=&quot;http://ocamllabs.io/multicore&quot;&gt;http://ocamllabs.io/multicore&lt;/a&gt;. Continuous
benchmarking has already enabled us to make &lt;a href=&quot;https://github.com/ocamllabs/ocaml-multicore/pull/221&quot;&gt;informed
decisions&lt;/a&gt; about the
impact of our changes, and should come in handy over the next few months where
we polish off and tune the multicore runtime.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Currently, the benchmarks are all single-threaded and run on x86-64. Our current
aim is to quantify the performance impact of running single-threaded OCaml
programs using the multicore compiler. Moving forward, would would include
multi-threaded benchmarks and other architectures.&lt;/p&gt;

&lt;p&gt;The benchmarks and the benchmarking infrastructure were adapted from &lt;a href=&quot;https://github.com/OCamlPro/ocamlbench-repo&quot;&gt;OCamlPro’s
benchmark suite&lt;/a&gt; aimed at
benchmarking &lt;a href=&quot;https://bench.flambda.ocamlpro.com/&quot;&gt;Flambda optimisation passes&lt;/a&gt;.
The difference with the new infrastructure is that all the data is generated as
static HTML and CSV files with data processing performed on the client side in
JavaScript. I find the new setup easier to manage and deploy.&lt;/p&gt;

&lt;h2 id=&quot;quality-of-benchmarks&quot;&gt;Quality of benchmarks&lt;/h2&gt;

&lt;p&gt;If you observe the results, you will see that multicore is slowest compared to
trunk OCaml on &lt;code class=&quot;highlighter-rouge&quot;&gt;menhir-standard&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;menhir-fancy&lt;/code&gt;. But if you look closely:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kcsrk.info/assets/menhir-too-fast.png&quot; alt=&quot;Binary tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;these benchmarks complete in less than 10 milliseconds. This is not enough time
to faithfully compare the implementations as constant factors such as runtime
initialisation and costs of single untimely major GC dominate any useful work.
In fact, almost half of the benchmarks complete within a second. The quality of
this benchmark suite ought to be improved.&lt;/p&gt;

&lt;h2 id=&quot;call-for-benchmarks&quot;&gt;Call for benchmarks&lt;/h2&gt;

&lt;p&gt;While we want longer running benchmarks, we would also like those benchmarks to
represent real OCaml programs found in the wild. If you have long running &lt;em&gt;real&lt;/em&gt;
OCaml programs, please consider adding it to the benchmark suite. Your
contribution will ensure that performance-oriented OCaml features such as
multicore and flambda are evaluated on representative OCaml programs.&lt;/p&gt;

&lt;h2 id=&quot;how-to-contribute&quot;&gt;How to contribute&lt;/h2&gt;

&lt;p&gt;Make a PR to &lt;code class=&quot;highlighter-rouge&quot;&gt;multicore&lt;/code&gt; branch of
&lt;a href=&quot;https://github.com/ocamllabs/ocamlbench-repo/tree/multicore&quot;&gt;ocamllabs/ocamlbench-repo&lt;/a&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;packages&lt;/code&gt; directory contains many examples for how to prepare programs for
benchmarking. Among these, &lt;code class=&quot;highlighter-rouge&quot;&gt;numerical-analysis-bench&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;menhir-bench&lt;/code&gt; are
simple and illustrative.&lt;/p&gt;

&lt;p&gt;The benchmarks themselves are run using &lt;a href=&quot;https://github.com/kayceesrk/ocamlbench-scripts&quot;&gt;these
scripts&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h3&gt;

&lt;p&gt;There is a handy Dockerfile to test benchmarking setup:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; multicore-cb &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; Dockerfile &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#takes a while; grab a coffee&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This builds the docker image for the benchmarking infrastructure. You can run
the benchmarks as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:8080 &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; multicore-cb bash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/ocamlbench-scripts
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./run-bench.sh &lt;span class=&quot;nt&quot;&gt;--nowait&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--lazy&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#takes a while; grab lunch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can view the results by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/logs/operf
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; SimpleHTTPServer 8080&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now on your host machine, point your browser to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080&lt;/code&gt; to
interactively visualise the benchmark results.&lt;/p&gt;

&lt;h3 id=&quot;caveats&quot;&gt;Caveats&lt;/h3&gt;

&lt;p&gt;Aim to get your benchmark compiling with OCaml 4.06.1. You might have trouble
getting your benchmark to compile with the multicore compiler due to several
reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multicore compiler has syntax extensions for &lt;a href=&quot;http://kcsrk.info/ocaml/multicore/2015/05/20/effects-multicore/&quot;&gt;algebraic effect
handlers&lt;/a&gt;
which breaks packages that use ppx.&lt;/li&gt;
  &lt;li&gt;Multicore compiler has a different &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/1003&quot;&gt;C
API&lt;/a&gt; which breaks core dependencies
such as Lwt.&lt;/li&gt;
  &lt;li&gt;Certain features such as marshalling closures and custom tag objects are
unimplemented.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you encounter trouble submitting benchmarks, please make an issue on
&lt;a href=&quot;https://github.com/kayceesrk/ocamlbench-scripts&quot;&gt;kayceesrk/ocamlbench-scripts&lt;/a&gt; repo.&lt;/p&gt;
</content><id>http://kcsrk.info/multicore/ocaml/benchmarks/2018/09/13/1543-multicore-ci</id><title type="text">Continuous Benchmarking &amp; Call for Benchmarks</title><updated>2018-09-13T15:43:00-00:00</updated><author><email>sk826@cl.cam.ac.uk</email><name>KC Sivaramakrishnan</name></author></entry><entry><source><updated>2018-08-25T09:31:17-00:00</updated><link title="Mathematics and Computation" type="text/html" href="http://math.andrej.com" rel="related"/><link title="Mathematics and Computation" type="application/rss+xml" href="http://math.andrej.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.8-alpha-40048</generator><id>http://math.andrej.com</id><title type="text">Mathematics and Computation</title><author><name>Andrej Bauer</name></author></source><link href="http://math.andrej.com/2018/08/25/how-to-implement-type-theory-in-an-hour/" rel="alternate"/><link href="http://math.andrej.com/2018/08/25/how-to-implement-type-theory-in-an-hour/#respond" rel="related"/><content xml:base="http://math.andrej.com/feed/" type="html">&lt;p&gt;I was purging the disk on my laptop of large files and found a video lecture which I forgot to publish. Here it is with some delay. I lectured on how to implement type theory at the &lt;a href=&quot;https://unimath.github.io/bham2017/&quot;&gt;School and Workshop on Univalent Mathematics&lt;/a&gt; in December 2017, at the University of Birmingham (UK).&lt;/p&gt;
&lt;p&gt;You may &lt;a href=&quot;https://vimeo.com/286652934&quot;&gt;watch the video&lt;/a&gt; and visit the accompanying GitHub repository &lt;a href=&quot;https://github.com/andrejbauer/spartan-type-theory&quot;&gt;spartan-type-theory&lt;/a&gt;.&lt;/p&gt;
</content><category term="Tutorial"/><id>http://math.andrej.com/?p=2013</id><title type="text">How to implement type theory in an hour</title><updated>2018-08-25T09:31:17-00:00</updated><author><name>Andrej Bauer</name></author></entry><entry><source><updated>2018-08-21T00:00:00-00:00</updated><link title="Drup's thingies" type="text/html" href="https://drup.github.io/" rel="related"/><link title="Drup's thingies" type="application/rss+xml" href="http://drup.github.io/feed-ocaml.xml" rel="self"/><id>https://drup.github.io/</id><title type="text">Drup's thingies</title><author><name>Gabriel Radanne</name></author></source><link href="https://drup.github.io/2018/08/21/ppx-tyre/" rel="alternate"/><content xml:base="http://drup.github.io/feed-ocaml.xml" type="html">
        
        
        
        &lt;p&gt;Some times ago, I released &lt;a href=&quot;/2016/08/12/tyre/&quot;&gt;Tyre&lt;/a&gt;, 
a library for Typed Regular Expressions
that allows matching, printing and routing. While many people expressed interest,
the syntax was (rightfully) considered too obtuse for practical usage.
Thanks to Petter A. ‘&lt;a href=&quot;https://github.com/paurkedal&quot;&gt;paurkedal&lt;/a&gt;’ Urkedal, this should now be fixed!&lt;/p&gt;


        
        </content><id>https://drup.github.io/2018/08/21/ppx-tyre/</id><title type="text">Ann: A new ppx for tyre and new version of ppx_regexp | Drup's thingies</title><updated>2018-08-21T00:00:00-00:00</updated><author><name>Gabriel Radanne</name></author></entry><entry><source><updated>2018-07-29T12:23:30-00:00</updated><logo>https://gaiustech.files.wordpress.com/2018/07/cropped-lynx.jpg?w=32</logo><link title="Ocaml – So I decided to take my work back underground" type="text/html" href="https://gaiustech.wordpress.com" rel="related"/><link title="Ocaml – So I decided to take my work back underground" type="application/rss+xml" href="http://gaiustech.wordpress.com/category/ocaml/feed/" rel="self"/><generator>http://wordpress.com/</generator><id>https://gaiustech.wordpress.com</id><title type="text">Ocaml – So I decided to take my work back underground</title><author><name>Gaius Hammond</name></author></source><link href="https://gaiustech.wordpress.com/2018/07/29/not-learning-is-a-skill-too/" rel="alternate"/><link href="https://gaiustech.wordpress.com/2018/07/29/not-learning-is-a-skill-too/#comments" rel="related"/><content xml:base="http://gaiustech.wordpress.com/category/ocaml/feed/" type="html">&lt;p&gt;To be successful in tech, it&amp;#8217;s well known that you must keep your skills up to date. The onus is on each individual to do this, no-one will do it for you, and companies that provide ongoing personal development are few and far between. Many companies would rather &lt;a href=&quot;https://www.theregister.co.uk/2018/02/06/ibm_retracts_agreed_voluntary_redundancies/&quot;&gt;&amp;#8220;remix our skills&amp;#8221;&lt;/a&gt;, which means laying off workers with one skill (on statutory minimum terms) and hiring people with the new skill. Which is short-termist in the extreme; the new workers are no better than the old, they just happened to enter the workforce later, and the churn means there is no accumulation of institutional knowledge. If you were one of the newer workers, why would you voluntarily step onto this treadmill and if you were a client, why would you hire such a firm when it provides no value-add over just hiring the staff you need yourself? Anyway, I digress.&lt;/p&gt;
&lt;p&gt;It is clear that C++11 was a enormous improvement over C++98. The list of &lt;a href=&quot;https://smartbear.com/blog/develop/the-biggest-changes-in-c11-and-why-you-should-care/&quot;&gt;new features&lt;/a&gt; is vast and all-encompassing, yet at the same time, backwards compatibility is preserved. You can have all the benefits of the new while preserving investment in the old (&amp;#8220;legacy&amp;#8221;). Upgrading your skills to C++11 was a very obvious thing to do, and because of the smooth transition, you could make quick wins as you brought yourself up to speed. That is just one example of the sort of thing I am talking about. You still need to put the effort in to learn it and seek out opportunities to use it, but the path from the old to the new is straightforward and there are early and frequent rewards along the way, and from there to C++14, 17, 20&amp;#8230;&lt;/p&gt;
&lt;p&gt;But I look around the current technology landscape and I see things that are only incremental improvements on existing programming languages or technologies and yet require a clean break with the past, which in practice means not only learning the new thing, but also rebuilding the ecosystem and tooling around it, porting/re-writing all the code, encountering all new bugs and edge cases, rediscovering the design patterns or new idioms in the language. The extent to which the new technology is &amp;#8220;better&amp;#8221; is dwarfed by the effort taken to use it, so where is the improved productivity coming from? Every project consists of either learning the language as you go, or maintaining and extending something written by someone who was learning the language as they went, perhaps gambling on getting in on the ground floor of the next big thing. But things only get big if people stick with them is the paradox!&lt;/p&gt;
&lt;p&gt;So I am pretty comfortable with my decision to mostly ignore lots of new things, including but not limited to Go, Rust, Julia, &lt;a href=&quot;https://blogs.msdn.microsoft.com/devops/2018/07/18/protecting-our-users-from-the-npm-eslint-package-breach/&quot;&gt;Node.js&lt;/a&gt;, Perl6 in favour of deepening my skills in C++, R, Python and pushing into new problem domains (e.g. &lt;a href=&quot;https://www.microsoft.com/en-us/cognitive-toolkit/&quot;&gt;ML/AI&lt;/a&gt;) with my tried and trusted tools. When something comes along that is a big enough leap forward over any of them, of course I&amp;#8217;ll jump &amp;#8211; just like I did when I learnt Java in 1995 and was getting paid for it the same year! I had a lot of fun with OCaml and Haskell too, but neither gained significant traction in the end, also &lt;a href=&quot;https://gaiustech.wordpress.com/2011/06/15/scala-quickstart-for-oracle-dbas/&quot;&gt;Scala&lt;/a&gt;. I don&amp;#8217;t see anything on the horizon, all the cutting edge stuff is appearing as &lt;a href=&quot;https://devblogs.nvidia.com/seven-things-numba/&quot;&gt;libraries&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B20&quot;&gt;features&lt;/a&gt; for my &amp;#8220;big 3&amp;#8221; while the newer ecosystems are scrambling to backfill their capabilities and will probably never match the breadth and depth, before falling out of fashion and fading away. I&amp;#8217;ll be interested in any comments arguing why I&amp;#8217;m wrong to discount them, or any pointers to things that &lt;i&gt;are&lt;/i&gt; sufficiently advanced to be worth taking a closer look at.&lt;/p&gt;
</content><category term="R"/><id>http://gaiustech.wordpress.com/?p=2540</id><title type="text">Not-learning is a skill too</title><updated>2018-07-29T12:23:30-00:00</updated><author><name>Gaius Hammond</name></author></entry><entry><source><updated>2018-09-19T08:03:33-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.8</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/07/26/opam-2-0-0-rc4-final-is-out/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/07/26/opam-2-0-0-rc4-final-is-out/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;We are happy to announce the &lt;a href='https://github.com/ocaml/opam/releases/tag/2.0.0-rc4'&gt;opam 2.0.0 final release candidate&lt;/a&gt;! &lt;img src=&quot;https://s.w.org/images/core/emoji/11/72x72/1f37e.png&quot; alt=&quot;🍾&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This release features a few bugfixes over &lt;a href='../opam-2-0-0-rc3'&gt;Release Candidate 3&lt;/a&gt;. &lt;strong&gt;It will be promoted to 2.0.0 proper within a few weeks, when the &lt;a href='https://github.com/ocaml/opam-repository'&gt;official repository&lt;/a&gt; format switches from 1.2.0 to 2.0.0.&lt;/strong&gt; After that date, updates to the 1.2.0 repository may become limited, as new features are getting used in packages.&lt;/p&gt;
&lt;p&gt;It is safe to update as soon as you see fit, since opam 2.0.0 supports the older formats. See the &lt;a href='http://opam.ocaml.org/2.0-preview/doc/Upgrade_guide.html'&gt;Upgrade Guide&lt;/a&gt; for details about the new features and changes. If you are a package maintainer, you should keep publishing as before for now: the roadmap for the repository upgrade will be detailed shortly.&lt;/p&gt;
&lt;p&gt;The opam.ocaml.org pages have also been refreshed a bit, and the new version showing the 2.0.0 branch of the repository is already online at &lt;a href='http://opam.ocaml.org/2.0-preview/'&gt;http://opam.ocaml.org/2.0-preview/&lt;/a&gt; (report any issues &lt;a href='https://github.com/ocaml/opam2web/issues'&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;hr/&gt;Installation instructions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;From binaries: run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sh &amp;lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or download manually from &lt;a href='https://github.com/ocaml/opam/releases/tag/2.0.0-rc4'&gt;the Github &amp;quot;Releases&amp;quot; page&lt;/a&gt; to your PATH. In this case, don&amp;#39;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From source, using opam:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;opam update; opam install opam-devel&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(then copy the opam binary to your PATH as explained, and don&amp;#39;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From source, manually: see the instructions in the &lt;a href='https://github.com/ocaml/opam/tree/2.0.0-rc4#compiling-this-repo'&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We hope you enjoy this new version, and remain open to &lt;a href='https://github.com/ocaml/opam/issues'&gt;bug reports&lt;/a&gt; and &lt;a href='https://github.com/ocaml/opam/issues'&gt;suggestions&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: this article is cross-posted on &lt;a href='https://opam.ocaml.org/blog/'&gt;opam.ocaml.org&lt;/a&gt; and &lt;a href='http://www.ocamlpro.com/category/blog/'&gt;ocamlpro.com&lt;/a&gt;. Please head to the latter for the comments!&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=1103</id><title type="text">opam 2.0.0 RC4-final is out!</title><updated>2018-07-26T14:05:25-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-07-23T06:49:17-00:00</updated><link title="Frama-C RSS News" type="text/html" href="http://frama-c.com/" rel="related"/><link title="Frama-C RSS News" type="application/rss+xml" href="http://frama-c.com/rss.xml" rel="self"/><id>http://frama-c.com/</id><title type="text">Frama-C RSS News</title><author><name>Frama-C</name></author></source><link href="http://frama-c.com/index.html" rel="alternate"/><id>http://frama-c.com/index.html#5ebffaf422d72634057e5b0deaba301f</id><title type="text">frama-clang 0.0.6, compatible with Frama-C 17 Chlorine
   is out. Download ithere.</title><updated>2018-07-23T06:49:17-00:00</updated><author><name>Frama-C</name></author></entry><entry><source><updated>2018-08-25T09:31:17-00:00</updated><link title="Mathematics and Computation" type="text/html" href="http://math.andrej.com" rel="related"/><link title="Mathematics and Computation" type="application/rss+xml" href="http://math.andrej.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.8-alpha-40048</generator><id>http://math.andrej.com</id><title type="text">Mathematics and Computation</title><author><name>Andrej Bauer</name></author></source><link href="http://math.andrej.com/2018/07/22/algebraic-effects-and-handlers-at-oplss-2018/" rel="alternate"/><link href="http://math.andrej.com/2018/07/22/algebraic-effects-and-handlers-at-oplss-2018/#comments" rel="related"/><content xml:base="http://math.andrej.com/feed/" type="html">&lt;p&gt;I have had the honor to lecture at the &lt;a href=&quot;https://www.cs.uoregon.edu/research/summerschool/summer18/index.php&quot;&gt;Oregon Programming Language Summer School 2018&lt;/a&gt; on the topic of algebraic effects and handlers. The notes, materials and the lectures are available online:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the GitHub repository with the &lt;a href=&quot;https://github.com/OPLSS/introduction-to-algebraic-effects-and-handlers&quot;&gt;course material&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the &lt;a href=&quot;https://www.cs.uoregon.edu/research/summerschool/summer18/topics.php&quot;&gt;OPLSS lecture materials&lt;/a&gt;, including notes and video recordings of the lectures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I gave four lectures which started with the mathematics of algebraic theories, explained how they can be used to model computational effects, how we make a programming language out of them, and how to program with handlers.&lt;/p&gt;
</content><category term="Videos"/><id>http://math.andrej.com/?p=2010</id><title type="text">Algebraic effects and handlers at OPLSS 2018</title><updated>2018-07-22T01:39:42-00:00</updated><author><name>Andrej Bauer</name></author></entry><entry><source><updated>2018-09-19T08:03:33-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.8</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/07/20/new-updates-on-tzscan-2/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/07/20/new-updates-on-tzscan-2/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p class=&quot;s570a4-10 iEJDri&quot;&gt;&lt;span class=&quot;s570a4-27 dkcuFY&quot;&gt;OCamlPro is pleased to announce the latest update of TZScan (&lt;a href=&quot;http://tzscan.io&quot;&gt;http://tzscan.io&lt;/a&gt;), its Tezos block explorer to ease the use of the Tezos network. TzScan is now ready for the protocol update scheduled for tomorrow. In addition to some minor bugfixes, the main novelties are: &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Displaying of obtained and &lt;a href=&quot;http://tzscan.io/tz3UoffC7FG7zfpmvmjUmUeAaHvzdcUvAj6r?default=rewards&quot;&gt;expected rewards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adding of &lt;a href=&quot;http://tzscan.io/tz3UoffC7FG7zfpmvmjUmUeAaHvzdcUvAj6r&quot;&gt;internal transactions&lt;/a&gt; of smart contracts&lt;/li&gt;
&lt;li&gt;Adding of &lt;a href=&quot;http://tzscan.io/delegation-services&quot;&gt;delegation services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Aliasing of known account and sponsors&lt;/li&gt;
&lt;li&gt;Improvements of UX, and faster navigation&lt;/li&gt;
&lt;li&gt;Improvements on desktop, tablets and mobiles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We continue to maintain the alphanet and zeronet branches in parallel of the betanet.&lt;br /&gt;
We keep on working hard to improve and add new features to TzScan. Further enhancements and optimizations are to come. Enjoy and play with our explorer!&lt;br /&gt;
If you have any suggestions or bugs to report, please notify us at &lt;a href=&quot;mailto:contact@tzscan.io&quot;&gt;contact@tzscan.io &lt;/a&gt;&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=1092</id><title type="text">OCamlPro’s Tezos block explorer TzScan’s last updates</title><updated>2018-07-20T16:54:07-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-07-10T00:00:00-00:00</updated><logo>http://caml.inria.fr//pub/logos/caml-inria-fr.128x58.gif</logo><link title="The Caml Language" type="text/html" href="http://caml.inria.fr/" rel="related"/><link title="The Caml Language" type="application/rss+xml" href="http://caml.inria.fr/news.en.rss" rel="self"/><id>http://caml.inria.fr/</id><title type="text">The Caml Language</title><author><name>Caml INRIA</name></author></source><link href="http://caml.inria.fr/pub/distrib/ocaml-4.07/" rel="alternate"/><id>http://caml.inria.fr/pub/distrib/ocaml-4.07/#eac2175590735c5e6b52fb07633c3b18</id><title type="text">OCaml 4.07.0 released</title><updated>2018-07-10T00:00:00-00:00</updated><author><name>Caml INRIA</name></author></entry><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/146.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">
&lt;p&gt;The &lt;a href=&quot;https://github.com/coq/coq/releases/tag/V8.8.1&quot;&gt;8.8.1 release of Coq&lt;/a&gt; is available.&lt;/p&gt;

&lt;p&gt;It includes four critical bug fixes, many other bug fixes, documentation improvements
and user message improvements.&lt;/p&gt;

&lt;p&gt;For details, see &lt;a href=&quot;https://github.com/coq/coq/blob/V8.8.1/CHANGES&quot;&gt;CHANGES&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/coq/coq/milestone/13?closed=1&quot;&gt;8.8.1 milestone&lt;/a&gt;.
Feedback and &lt;a href=&quot;https://github.com/coq/coq/issues&quot;&gt;bug reports&lt;/a&gt; are extremely welcome.&lt;/p&gt;


 </content><id>https://coq.inria.fr/news/146.html</id><title type="text">Coq 8.8.1 is out</title><updated>2018-07-09T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2018-09-17T03:42:40-00:00</updated><subtitle xml:base="http://blog.shaynefletcher.org/feeds/posts/default/-/OCaml" type="html">&quot;Hooked&quot; on programming</subtitle><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/-/OCaml/-/OCaml?start-index=26&amp;max-results=25" rel="next"/><link href="http://pubsubhubbub.appspot.com/" rel="hub"/><link type="text/html" href="http://blog.shaynefletcher.org/search/label/OCaml" rel="alternate"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/-/OCaml" rel="self"/><link type="application/atom+xml" href="http://blog.shaynefletcher.org/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed"/><generator uri="http://www.blogger.com" version="7.00">Blogger</generator><category term="recursive descent"/><category term="ppf"/><category term="ocaml-migrate-parse-tree"/><category term="left recursion"/><category term="grammars"/><category term="balanced binary search trees"/><category term="Windows 8.1"/><category term="Windows 7"/><category term="Variance"/><category term="Unix tree"/><category term="Universal type"/><category term="Universal Gas Constant"/><category term="Traversable"/><category term="Transpose"/><category term="Tail recursion"/><category term="Subtyping"/><category term="Stack overflow"/><category term="Sorting"/><category term="Simulation"/><category term="Sieve of Eratosthenes"/><category term="Science"/><category term="Rings"/><category term="Recursion"/><category term="Priority queue"/><category term="Pretty-printing"/><category term="Poof"/><category term="Polynomials"/><category term="Polymorphic variants"/><category term="Permutation"/><category term="Pascal"/><category term="Numerical analysis"/><category term="Monty Hall"/><category term="Monoid"/><category term="Modules"/><category term="List comprehensions"/><category term="Leftist heap"/><category term="Labeled arguments"/><category term="Ideal Gas Law"/><category term="Horner's rule"/><category term="Graph"/><category term="Functors"/><category term="Functor"/><category term="Financial Modeling in Python"/><category term="Exponentiation by squaring"/><category term="Dijkstra"/><category term="Compression"/><category term="Combination"/><category term="Church-Turing thesis"/><category term="Church numerals"/><category term="Cartesian product"/><category term="Applicative functor"/><category term="64-bit"/><category term="ppx"/><category term="ocamlyacc"/><category term="ocamllex"/><category term="Y Combinator"/><category term="Taylor polynomials"/><category term="Streams"/><category term="Recursive lists"/><category term="Prolog"/><category term="Monads"/><category term="Dimensional analysis"/><category term="Algorithmic complexity"/><category term="Algebra"/><category term="type-classes"/><category term="Regular expressions"/><category term="Powerset"/><category term="Statistics"/><category term="Lexical analysis"/><category term="Haskell"/><category term="Parsing"/><category term="data structures"/><category term="Symbolic computation"/><category term="Lambda calculus"/><category term="Felix"/><category term="Boost"/><category term="Python"/><category term="Algorithms"/><category term="C++"/><category term="Functional programming"/><category term="OCaml"/><id>tag:blogger.com,1999:blog-5012565255225108517</id><title type="text">Shayne Fletcher</title><author><email>noreply@blogger.com</email><name>Shayne Fletcher</name></author></source><published>2018-06-10T18:29:00-00:00</published><link title="Bucket Sort" type="text/html" href="http://blog.shaynefletcher.org/2018/06/bucket-sort.html" rel="alternate"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/4719615203183396494" rel="self"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/4719615203183396494" rel="edit"/><content xml:base="http://blog.shaynefletcher.org/feeds/posts/default/-/OCaml" type="html">&lt;html&gt;&lt;head&gt;&lt;style&gt;.keyword { font-weight : bold ; color : Red } .keywordsign { color : #C04600 } .comment { color : Green } .constructor { color : Blue } .type { color : #5C6585 } .string { color : Maroon } .warning { color : Red ; font-weight : bold } .info { margin-left : 3em; margin-right: 3em } .param_info { margin-top: 4px; margin-left : 3em; margin-right : 3em } .code { color : #465F91 ; background-color: #F5F5F5; } pre { margin-bottom: 4px; font-family: monospace; background-color: #F5F5F5; } pre.verbatim, pre.codepre { }&lt;/style&gt;&lt;meta content=&quot;text/html; charset=utf-8&quot; http-equiv=&quot;Content-Type&quot;&gt;&lt;title&gt;Bucket Sort&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Bucket sort assumes input generated by a random process that distributes elements uniformly over the interval &lt;i&gt;[0, 1)&lt;/i&gt;. &lt;/p&gt;&lt;p&gt;The idea of bucket sort is to divide &lt;i&gt;[0, 1)&lt;/i&gt; into &lt;i&gt;n&lt;/i&gt; equal-sized subintervals or &lt;i&gt;buckets&lt;/i&gt;, and then distribute the &lt;i&gt;n&lt;/i&gt; input numbers into the buckets. To produce the output, sort the numbers in each bucket and then go through the buckets in order. Sorting a bucket can be done with insertion sort. &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;rec&lt;/span&gt; insert x = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; [] &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; [x]&lt;br /&gt;  &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; h :: tl &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; ls &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;lt; h &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; x :: ls &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; h :: insert x tl&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;rec&lt;/span&gt; insertion_sort = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; [] &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; [_] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; ls &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; ls&lt;br /&gt;  &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; h :: tl &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; insert h (insertion_sort tl)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;This code for bucket sort assumes the input is an &lt;i&gt;n&lt;/i&gt;-element array &lt;code class=&quot;code&quot;&gt;a&lt;/code&gt; and that each element &lt;i&gt;0 ≤ &lt;code class=&quot;code&quot;&gt;a.(i)&lt;/code&gt; &amp;lt; 1&lt;/i&gt;. The code requires an auxillary array &lt;code class=&quot;code&quot;&gt;b&lt;/code&gt;.(&lt;i&gt;0 .. n - 1&lt;/i&gt;) of lists (buckets). &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; bucket_sort a =&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; n = &lt;span class=&quot;constructor&quot;&gt;Array&lt;/span&gt;.length a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;constructor&quot;&gt;Array&lt;/span&gt;.make n [] &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;constructor&quot;&gt;Array&lt;/span&gt;.iter&lt;br /&gt;    (&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; x &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i =&lt;br /&gt;         int_of_float (&lt;br /&gt;           floor (float_of_int n *. x)&lt;br /&gt;         ) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;constructor&quot;&gt;Array&lt;/span&gt;.set b i (x :: &lt;span class=&quot;constructor&quot;&gt;Array&lt;/span&gt;.get b i)&lt;br /&gt;      ) a;&lt;br /&gt;  &lt;span class=&quot;constructor&quot;&gt;Array&lt;/span&gt;.iteri&lt;br /&gt;    (&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; i l &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;constructor&quot;&gt;Array&lt;/span&gt;.set b i (insertion_sort l)&lt;br /&gt;    ) b;&lt;br /&gt;  &lt;span class=&quot;constructor&quot;&gt;Array&lt;/span&gt;.fold_left (&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; acc bucket &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; acc @ bucket) [] b&lt;br /&gt;;;&lt;br /&gt;bucket_sort [| 0.78; 0.17; 0.39; 0.26; 0.72; 0.94&lt;br /&gt;             ; 0.21; 0.12; 0.23; 0.68|]&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;Bucket sort runs in linear time on the average. &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;References:&lt;br&gt;[1] &quot;Introduction to Algorithms&quot; Section 9.4:Bucket Sort -- Cormen et. al. (Second ed.) 2001.&lt;br&gt;&lt;/p&gt;  &lt;/body&gt;&lt;/html&gt;</content><category scheme="http://www.blogger.com/atom/ns#" term="OCaml"/><category scheme="http://www.blogger.com/atom/ns#" term="Algorithms"/><id>tag:blogger.com,1999:blog-5012565255225108517.post-4719615203183396494</id><title type="text">Bucket Sort</title><updated>2018-06-10T18:29:22-00:00</updated><author><email>noreply@blogger.com</email><uri>https://plus.google.com/104436573144909855029</uri><name>Shayne Fletcher</name></author></entry><entry><source><updated>2018-07-23T06:49:17-00:00</updated><link title="Frama-C RSS News" type="text/html" href="http://frama-c.com/" rel="related"/><link title="Frama-C RSS News" type="application/rss+xml" href="http://frama-c.com/rss.xml" rel="self"/><id>http://frama-c.com/</id><title type="text">Frama-C RSS News</title><author><name>Frama-C</name></author></source><link href="http://frama-c.com/index.html" rel="alternate"/><id>http://frama-c.com/index.html#2e12177a2e6fdec0ffc44deb6ba9aaff</id><title type="text">Frama-C 17 - Chlorine is out. Download ithere.</title><updated>2018-05-31T16:00:00-00:00</updated><author><name>Frama-C</name></author></entry><entry><source><updated>2018-08-21T00:00:00-00:00</updated><link title="Drup's thingies" type="text/html" href="https://drup.github.io/" rel="related"/><link title="Drup's thingies" type="application/rss+xml" href="http://drup.github.io/feed-ocaml.xml" rel="self"/><id>https://drup.github.io/</id><title type="text">Drup's thingies</title><author><name>Gabriel Radanne</name></author></source><link href="https://drup.github.io/2018/05/30/quine/" rel="alternate"/><content xml:base="http://drup.github.io/feed-ocaml.xml" type="html">
        
        
        
        &lt;div class=&quot;language-ocaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s %S&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(fun x -&amp;gt; Printf.printf &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%s %S&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; x x)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


        
        </content><id>https://drup.github.io/2018/05/30/quine/</id><title type="text">An OCaml quine | Drup's thingies</title><updated>2018-05-30T00:00:00-00:00</updated><author><name>Gabriel Radanne</name></author></entry><entry><source><updated>2018-09-19T08:03:33-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.8</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/05/22/opam-2-0-0-release-candidate-2-is-out/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/05/22/opam-2-0-0-release-candidate-2-is-out/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;We are pleased to announce the release of a second release candidate for OPAM 2.0.0.&lt;/p&gt;
&lt;p&gt;This new version brings us very close to a final 2.0.0 release, and in addition to many fixes, features big performance enhancements over the RC1.&lt;/p&gt;
&lt;p&gt;Among the new features, we have squeezed in full sandboxing of package commands for both Linux and Mac OS, to protect our users from any &lt;a href=&quot;http://opam.ocaml.org/blog/camlp5-system/&quot;&gt;misbehaving scripts&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NOTE: if upgrading manually from 2.0.0~rc, you need to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The new release candidate also offers the possibility to setup a hook in your shell, so that you won&amp;#8217;t need to run &lt;code&gt;eval $(opam env)&lt;/code&gt; anymore. This is specially useful in combination with local switches, because with it enabled, you are guaranteed that running &lt;code&gt;make&lt;/code&gt; from a project directory containing a local switch will use it.&lt;/p&gt;
&lt;p&gt;The documentation has also been updated, and a preview of the opam 2 webpages can be browsed at &lt;a href=&quot;http://opam.ocaml.org/2.0-preview/&quot;&gt;http://opam.ocaml.org/2.0-preview/&lt;/a&gt; (please report issues &lt;a href=&quot;https://github.com/ocaml/opam2web/issues&quot;&gt;here&lt;/a&gt;). This provides the list of packages available for opam 2 (the &lt;code&gt;2.0&lt;/code&gt; branch of &lt;a href=&quot;https://github.com/ocaml/opam-repository/tree/2.0.0&quot;&gt;opam-repository&lt;/a&gt;), including the &lt;a href=&quot;https://opam.ocaml.org/2.0-preview/packages/ocaml-base-compiler/&quot;&gt;compiler packages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Installation instructions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From binaries: run
&lt;pre&gt;&lt;code&gt;sh &amp;lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or download manually from &lt;a href=&quot;https://github.com/ocaml/opam/releases/tag/2.0.0-rc2&quot;&gt;the Github &amp;#8220;Releases&amp;#8221; page&lt;/a&gt; to your PATH. In this case, don&amp;#8217;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed.&lt;/li&gt;
&lt;li&gt;From source, using opam:
&lt;pre&gt;&lt;code&gt;opam update; opam install opam-devel&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(then copy the opam binary to your PATH as explained, and don&amp;#8217;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed)&lt;/li&gt;
&lt;li&gt;From source, manually: see the instructions in the &lt;a href=&quot;https://github.com/ocaml/opam/tree/2.0.0-rc2#compiling-this-repo&quot;&gt;README&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks a lot for testing out this new RC and &lt;a href=&quot;https://github.com/ocaml/opam/issues&quot;&gt;reporting&lt;/a&gt; any issues you may find.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NOTE: this article is cross-posted on &lt;a href=&quot;https://opam.ocaml.org/blog/&quot;&gt;opam.ocaml.org&lt;/a&gt; and &lt;a href=&quot;http://www.ocamlpro.com/category/blog/&quot;&gt;ocamlpro.com&lt;/a&gt;. Please head to the latter for comments!&lt;/p&gt;&lt;/blockquote&gt;
</content><category term="OPAM"/><id>http://www.ocamlpro.com/?p=1055</id><title type="text">opam 2.0.0 Release Candidate 2 is out!</title><updated>2018-05-22T09:00:31-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-05-22T08:00:00-00:00</updated><logo>http://gallium.inria.fr/blog/</logo><link title="Gagallium" type="text/html" href="http://gallium.inria.fr/blog/index.rss" rel="related"/><link title="Gagallium" type="application/rss+xml" href="http://gallium.inria.fr/blog/index.rss" rel="self"/><generator>Stog</generator><id>http://gallium.inria.fr/blog/index.rss</id><title type="text">Gagallium</title><author><name>GaGallium</name></author></source><link href="http://gallium.inria.fr/blog/simpl-is-less-annoying-than-you-think" rel="alternate"/><content xml:base="http://gallium.inria.fr/blog/index.rss" type="html">

&lt;p&gt;In this blogpost we find out that it is possible to tweak the behavior of the Coq &lt;code&gt;simpl&lt;/code&gt; tactic. We find it particularly useful when dealing with arithmetic goals on Z.&lt;/p&gt;




&lt;p&gt;We just discovered an answer to a longstanding annoyance we faced when dealing with arithmetic Coq goals. Consider the following Coq goal, using integers on &lt;code&gt;Z&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;Import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZArith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;Open&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z_scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;Goal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;intros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;simpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We call the &lt;code&gt;simpl&lt;/code&gt; tactic to simplify &lt;code&gt;0 * a + ...&lt;/code&gt; into &lt;code&gt;...&lt;/code&gt;. Unfortunately, since &lt;code&gt;*&lt;/code&gt; is defined by pattern matching on its first argument, &lt;code&gt;simpl&lt;/code&gt; also unfolds &lt;code&gt;2 * a&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;a : Z
============================
match a with
| 0 =&amp;gt; 0
| Z.pos y' =&amp;gt; Z.pos y'~0
| Z.neg y' =&amp;gt; Z.neg y'~0
end = a * 2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is both unconvenient and unsupported by automated tactics (such as &lt;code&gt;omega&lt;/code&gt; or &lt;code&gt;lia&lt;/code&gt;). One idea would be to make &lt;code&gt;Z.mul&lt;/code&gt; opaque:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;n&quot;&gt;Opaque&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This prevents both &lt;code&gt;2 * a&lt;/code&gt; and &lt;code&gt;0 * a&lt;/code&gt; from being simplified. This can be seen as a reasonable trade-off (&lt;code&gt;omega&lt;/code&gt; will still be able to solve the goal).&lt;/p&gt;
&lt;p&gt;However it also prevents reduction using &lt;code&gt;eval compute&lt;/code&gt;, which breaks the &lt;a href=&quot;https://github.com/thery/PolTac&quot;&gt;PolTac&lt;/a&gt; library for example (interestingly, &lt;code&gt;eval vm_compute&lt;/code&gt; ignores Opaque).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;compute&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* x := 2*3 *)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;vm_compute&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* x := 6 *)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A better solution can be found by reading the manual section for &lt;code&gt;simpl&lt;/code&gt; (!). It is possible to customize for each definition the amount of unfolding performed by &lt;code&gt;simpl&lt;/code&gt;. For example, the following instructs &lt;code&gt;simpl&lt;/code&gt; to never unfold &lt;code&gt;Z.mul&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;Arguments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;simpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since this invocation only matters for &lt;code&gt;simpl&lt;/code&gt;, &lt;code&gt;eval compute&lt;/code&gt; and PolTac both continue to work.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;compute&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* x := 6 *)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;Goal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;intros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;simpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;(* 2 * a = 0 * a + a * 2 *)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And even better, we can achieve what we initially intended (which is to simplify away &lt;code&gt;0 * a&lt;/code&gt;), by instructing &lt;code&gt;simpl&lt;/code&gt; to only unfold a definition if doing so does not introduce a &lt;code&gt;match&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;Arguments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;simpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nomatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;Goal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;intros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;simpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;(* 2 * a = a * 2 *)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More configuration options are possible, and are thoroughly detailed in the &lt;a href=&quot;https://coq.inria.fr/distrib/V8.8.0/refman/proof-engine/tactics.html#coq:tacn.simpl&quot;&gt;manual page&lt;/a&gt;.&lt;/p&gt;


</content><id>http://gallium.inria.fr/blog/simpl-is-less-annoying-than-you-think</id><title type="text">simpl is less annoying than you think</title><updated>2018-05-22T08:00:00-00:00</updated><author><name>Nathanaël Courant, Armaël Guéneau</name></author></entry><entry><source><updated>2018-09-17T03:42:40-00:00</updated><subtitle xml:base="http://blog.shaynefletcher.org/feeds/posts/default/-/OCaml" type="html">&quot;Hooked&quot; on programming</subtitle><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/-/OCaml/-/OCaml?start-index=26&amp;max-results=25" rel="next"/><link href="http://pubsubhubbub.appspot.com/" rel="hub"/><link type="text/html" href="http://blog.shaynefletcher.org/search/label/OCaml" rel="alternate"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/-/OCaml" rel="self"/><link type="application/atom+xml" href="http://blog.shaynefletcher.org/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed"/><generator uri="http://www.blogger.com" version="7.00">Blogger</generator><category term="recursive descent"/><category term="ppf"/><category term="ocaml-migrate-parse-tree"/><category term="left recursion"/><category term="grammars"/><category term="balanced binary search trees"/><category term="Windows 8.1"/><category term="Windows 7"/><category term="Variance"/><category term="Unix tree"/><category term="Universal type"/><category term="Universal Gas Constant"/><category term="Traversable"/><category term="Transpose"/><category term="Tail recursion"/><category term="Subtyping"/><category term="Stack overflow"/><category term="Sorting"/><category term="Simulation"/><category term="Sieve of Eratosthenes"/><category term="Science"/><category term="Rings"/><category term="Recursion"/><category term="Priority queue"/><category term="Pretty-printing"/><category term="Poof"/><category term="Polynomials"/><category term="Polymorphic variants"/><category term="Permutation"/><category term="Pascal"/><category term="Numerical analysis"/><category term="Monty Hall"/><category term="Monoid"/><category term="Modules"/><category term="List comprehensions"/><category term="Leftist heap"/><category term="Labeled arguments"/><category term="Ideal Gas Law"/><category term="Horner's rule"/><category term="Graph"/><category term="Functors"/><category term="Functor"/><category term="Financial Modeling in Python"/><category term="Exponentiation by squaring"/><category term="Dijkstra"/><category term="Compression"/><category term="Combination"/><category term="Church-Turing thesis"/><category term="Church numerals"/><category term="Cartesian product"/><category term="Applicative functor"/><category term="64-bit"/><category term="ppx"/><category term="ocamlyacc"/><category term="ocamllex"/><category term="Y Combinator"/><category term="Taylor polynomials"/><category term="Streams"/><category term="Recursive lists"/><category term="Prolog"/><category term="Monads"/><category term="Dimensional analysis"/><category term="Algorithmic complexity"/><category term="Algebra"/><category term="type-classes"/><category term="Regular expressions"/><category term="Powerset"/><category term="Statistics"/><category term="Lexical analysis"/><category term="Haskell"/><category term="Parsing"/><category term="data structures"/><category term="Symbolic computation"/><category term="Lambda calculus"/><category term="Felix"/><category term="Boost"/><category term="Python"/><category term="Algorithms"/><category term="C++"/><category term="Functional programming"/><category term="OCaml"/><id>tag:blogger.com,1999:blog-5012565255225108517</id><title type="text">Shayne Fletcher</title><author><email>noreply@blogger.com</email><name>Shayne Fletcher</name></author></source><published>2018-05-20T18:26:00-00:00</published><link title="Dijkstra's algorithm" type="text/html" href="http://blog.shaynefletcher.org/2018/05/dijkstras-algorithm.html" rel="alternate"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/6297713228015704017" rel="self"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/6297713228015704017" rel="edit"/><content xml:base="http://blog.shaynefletcher.org/feeds/posts/default/-/OCaml" type="html">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;           &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;&lt;html&gt;  &lt;head&gt;    &lt;style&gt;      .keyword { font-weight : bold ; color : Red }       .keywordsign { color : #C04600 }       .comment { color : Green }       .constructor { color : Blue }       .type { color : #5C6585 }       .string { color : Maroon }       .warning { color : Red ; font-weight : bold }       .info { margin-left : 3em; margin-right: 3em }       .param_info { margin-top: 4px; margin-left : 3em; margin-right : 3em }       .code {       color : #465F91 ;        background-color: #F5F5F5;       }       pre {       margin-bottom: 4px;       font-family: monospace;        background-color: #F5F5F5;       }       pre.verbatim, pre.codepre { }     &lt;/style&gt;    &lt;title&gt;Shortest Path&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;p&gt;This article assumes familiarity with Dijkstra's shortest path algorithm. For a refresher, see [1]. The code assumes &lt;code class=&quot;code&quot;&gt;open Core&lt;/code&gt; is in effect and is online &lt;a href=&quot;https://github.com/shayne-fletcher/zen/tree/master/ocaml/dijkstra&quot;&gt;here&lt;/a&gt;.     &lt;/p&gt;    &lt;p&gt;The first part of the program organizes our thoughts about what we are setting out to compute. The signature summarizes the notion (for our purposes) of a graph definition in modular form. A module implementing this signature defines a type &lt;code class=&quot;code&quot;&gt;vertex_t&lt;/code&gt; for vertices, a type &lt;code class=&quot;code&quot;&gt;t&lt;/code&gt; for graphs and type &lt;code class=&quot;code&quot;&gt;extern_t&lt;/code&gt; : a representation of a &lt;code class=&quot;code&quot;&gt;t&lt;/code&gt; for interaction between an implemening module and its &quot;outside world&quot;. &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Graph_sig&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;sig&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; vertex_t [@@deriving sexp]&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; t [@@deriving sexp]&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; extern_t&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; load_error = [ &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Duplicate_vertex&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; vertex_t ] [@@deriving sexp]&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Load_error&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; load_error [@@deriving sexp]&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; of_adjacency : extern_t &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; [ &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; t &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Load_error&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; load_error ]&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; to_adjacency : t &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; extern_t&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Dijkstra&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;sig&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; state&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; error = [&lt;br /&gt;      &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Relax&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; vertex_t&lt;br /&gt;    ] [@@deriving sexp]&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; error [@@deriving sexp]&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; dijkstra : vertex_t &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; t &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; [ &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; state &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; error ]&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; d : state &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; (vertex_t * float) list&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; shortest_paths : state &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; (vertex_t * vertex_t list) list&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;A realization of &lt;code class=&quot;code&quot;&gt;Graph_sig&lt;/code&gt; provides &quot;conversion&quot; functions &lt;code class=&quot;code&quot;&gt;of_adjacency&lt;/code&gt;/&lt;code class=&quot;code&quot;&gt;to_adjacency&lt;/code&gt; between the types &lt;code class=&quot;code&quot;&gt;extern_t&lt;/code&gt; and &lt;code class=&quot;code&quot;&gt;t&lt;/code&gt; and nests a module &lt;code class=&quot;code&quot;&gt;Dijkstra&lt;/code&gt;. The signature of the sub-module &lt;code class=&quot;code&quot;&gt;Dijkstra&lt;/code&gt; requires concrete modules provide a type &lt;code class=&quot;code&quot;&gt;state&lt;/code&gt; and an implementation of Dijkstra's algorithm in terms of the function signature &lt;code class=&quot;code&quot;&gt;val dijkstra : vertex_t -&gt; t -&gt; [ `Ok of state | `Error of error ]&lt;/code&gt;.     &lt;/p&gt;    &lt;p&gt;For reusability, the strategy for implementing graphs will be generic programming via functors over modules implementing s vertex type.&lt;/p&gt;    &lt;p&gt;An implementation of the module type &lt;code class=&quot;code&quot;&gt;GRAPH&lt;/code&gt; defines a module type &lt;code class=&quot;code&quot;&gt;VERT&lt;/code&gt; which is required to provide a comparable type &lt;code class=&quot;code&quot;&gt;t&lt;/code&gt;. It further defines a module type &lt;code class=&quot;code&quot;&gt;S&lt;/code&gt; that is exactly module type &lt;code class=&quot;code&quot;&gt;Graph_sig&lt;/code&gt; above. Lastly, modules of type &lt;code class=&quot;code&quot;&gt;GRAPH&lt;/code&gt; provide a functor &lt;code class=&quot;code&quot;&gt;Make&lt;/code&gt; that maps any module of type &lt;code class=&quot;code&quot;&gt;VERT&lt;/code&gt; to new module of type &lt;code class=&quot;code&quot;&gt;S&lt;/code&gt; fixing &lt;code class=&quot;code&quot;&gt;extern_t&lt;/code&gt; to an adjacency list representation in terms of the native OCaml type &lt;code class=&quot;code&quot;&gt;'a list&lt;/code&gt; and &lt;code class=&quot;code&quot;&gt;float&lt;/code&gt; to represent weights on edges. &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;GRAPH&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;sig&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;VERT&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;sig&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; t[@@deriving sexp]&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Comparable&lt;/span&gt;.&lt;span class=&quot;constructor&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; t := t&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;S&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;sig&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Graph_sig&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Make&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;functor&lt;/span&gt; (&lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt; : &lt;span class=&quot;constructor&quot;&gt;VERT&lt;/span&gt;) &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;constructor&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; vertex_t = &lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.t&lt;br /&gt;       &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; extern_t = (&lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.t * (&lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.t * float) list) list&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;The two module types &lt;code class=&quot;code&quot;&gt;Graph_sig&lt;/code&gt; and &lt;code class=&quot;code&quot;&gt;GRAPH&lt;/code&gt; together provide the specification for the program. &lt;code class=&quot;code&quot;&gt;module Graph&lt;/code&gt; in the next section implements this specification.     &lt;/p&gt;    &lt;p&gt;Implementation of module &lt;code class=&quot;code&quot;&gt;Graph&lt;/code&gt; is in outline this. &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Graph&lt;/span&gt; : &lt;span class=&quot;constructor&quot;&gt;GRAPH&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;VERT&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;sig&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; t[@@deriving sexp]&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Comparable&lt;/span&gt;.&lt;span class=&quot;constructor&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; t := t&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;S&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;sig&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Graph_sig&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Make&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;functor&lt;/span&gt; (&lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt; : &lt;span class=&quot;constructor&quot;&gt;VERT&lt;/span&gt;) &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;constructor&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; vertex_t = &lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.t&lt;br /&gt;       &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; extern_t = (&lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.t * (&lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.t * float) list) list&lt;br /&gt;    =&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;functor&lt;/span&gt; (&lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt; : &lt;span class=&quot;constructor&quot;&gt;VERT&lt;/span&gt;) &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&lt;br /&gt;       ...&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;As per the requirements of &lt;code class=&quot;code&quot;&gt;GRAPH&lt;/code&gt; the module types &lt;code class=&quot;code&quot;&gt;VERT&lt;/code&gt; and &lt;code class=&quot;code&quot;&gt;S&lt;/code&gt; are provided as is the functor &lt;code class=&quot;code&quot;&gt;Make&lt;/code&gt;. It is the code that is ellided by the &lt;code class=&quot;code&quot;&gt;...&lt;/code&gt; above in the definition of &lt;code class=&quot;code&quot;&gt;Make&lt;/code&gt; that is now the focus.     &lt;/p&gt;    &lt;p&gt;Modules produced by applications of &lt;code class=&quot;code&quot;&gt;Make&lt;/code&gt; satisfy &lt;code class=&quot;code&quot;&gt;S&lt;/code&gt;. This requires suitable definitions of types &lt;code class=&quot;code&quot;&gt;vertext_t&lt;/code&gt;, &lt;code class=&quot;code&quot;&gt;t&lt;/code&gt; and &lt;code class=&quot;code&quot;&gt;extern_t&lt;/code&gt;. The modules &lt;code class=&quot;code&quot;&gt;Map&lt;/code&gt; and &lt;code class=&quot;code&quot;&gt;Set&lt;/code&gt; are available due to modules of type &lt;code class=&quot;code&quot;&gt;VERT&lt;/code&gt; being comparable in their type &lt;code class=&quot;code&quot;&gt;t&lt;/code&gt;. &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt; = &lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.&lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Set&lt;/span&gt; = &lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.&lt;span class=&quot;constructor&quot;&gt;Set&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; vertex_t = &lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.t [@@deriving sexp]&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; t = (vertex_t * float) list &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.t [@@deriving sexp]&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; extern_t = (vertex_t * (vertex_t * float) list) list&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; load_error = [ &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Duplicate_vertex&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; vertex_t ] [@@deriving sexp]&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Load_error&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; load_error [@@deriving sexp]&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;    &lt;/p&gt;    &lt;p&gt;While the external representation &lt;code class=&quot;code&quot;&gt;extern_t&lt;/code&gt; of graphs is chosen to be an adjacency list representation in terms of association lists, the internal representation &lt;code class=&quot;code&quot;&gt;t&lt;/code&gt; is a vertex map of adjacency lists providing logarithmic loookup complexity. The conversion functions between the two representations &quot;come for free&quot; via module &lt;code class=&quot;code&quot;&gt;Map&lt;/code&gt;.  &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; to_adjacency g = &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.to_alist g&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; of_adjacency_exn l =  &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.of_alist l &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Ok&lt;/span&gt; t &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; t&lt;br /&gt;        &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Duplicate_key&lt;/span&gt; c &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; raise (&lt;span class=&quot;constructor&quot;&gt;Load_error&lt;/span&gt; (&lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Duplicate_vertex&lt;/span&gt; c))&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; of_adjacency l =&lt;br /&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Ok&lt;/span&gt; (of_adjacency_exn l)&lt;br /&gt;        &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Load_error&lt;/span&gt; err &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Load_error&lt;/span&gt; err&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;    &lt;/p&gt;&lt;p&gt;At this point the &quot;scaffolding&quot; for Dijkstra's algorithm, that part of &lt;code class=&quot;code&quot;&gt;GRAPH&lt;/code&gt; dealing with the representation of graphs is implemented.&lt;/p&gt;&lt;p&gt;The interpretation of Dijkstra's algorithm we adopt is functional : the idea is we loop over vertices relaxing their edges until all shortest paths are known. What we know on any recursive iteration of the loop is a current &quot;state&quot; (of the computation) and each iteration produces a new state. This next definition is the formal definition of &lt;code class=&quot;code&quot;&gt;type state&lt;/code&gt;. &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Dijkstra&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; state = {&lt;br /&gt;          src    :                  vertex_t&lt;br /&gt;        ; g      :                         t&lt;br /&gt;        ; d      :               float &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.t&lt;br /&gt;        ; pred   :            vertex_t &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.t&lt;br /&gt;        ; s      :                     &lt;span class=&quot;constructor&quot;&gt;Set&lt;/span&gt;.t&lt;br /&gt;        ; v_s    : (vertex_t * float) &lt;span class=&quot;constructor&quot;&gt;Heap&lt;/span&gt;.t&lt;br /&gt;        }&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;The fields of this record are: &lt;ul&gt;&lt;li&gt;&lt;code class=&quot;code&quot;&gt;src : vertex_t&lt;/code&gt;, the source vertex;&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;code&quot;&gt;g : t&lt;/code&gt;, &lt;i&gt;G&lt;/i&gt; the graph;&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;code&quot;&gt;d : float Map.t&lt;/code&gt;, &lt;i&gt;d&lt;/i&gt; the shortest path weight estimates;&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;code&quot;&gt;pre : vertex_t Map.t&lt;/code&gt;, &lt;i&gt;&amp;pi;&lt;/i&gt; the predecessor relation;&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;code&quot;&gt;s : Set.t&lt;/code&gt;, the set &lt;i&gt;S&lt;/i&gt; of nodes for which the lower bound shortest path weight is known;&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;code&quot;&gt;v_s : (vertex_t * float) Heap.t&lt;/code&gt;, &lt;i&gt;V - {S}, &lt;/i&gt; , the set of nodes of &lt;code class=&quot;code&quot;&gt;g&lt;/code&gt; for which the lower bound of the shortest path weight is not yet known ordered on their estimates.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Function invocation &lt;code class=&quot;code&quot;&gt;init src g&lt;/code&gt; compuates an initial state for the graph &lt;code class=&quot;code&quot;&gt;g&lt;/code&gt; containing the source node &lt;code class=&quot;code&quot;&gt;src&lt;/code&gt;. In the initial state, &lt;code class=&quot;code&quot;&gt;d&lt;/code&gt; is everywhere &lt;i&gt;&amp;infin;&lt;/i&gt; except for &lt;code class=&quot;code&quot;&gt;src&lt;/code&gt; which is &lt;i&gt;0&lt;/i&gt;. Set &lt;i&gt;S&lt;/i&gt; (i.e. &lt;code class=&quot;code&quot;&gt;s&lt;/code&gt;) and the predecessor relation &lt;i&gt;&amp;pi;&lt;/i&gt; (i.e. &lt;code class=&quot;code&quot;&gt;pred&lt;/code&gt;) are empty and the set &lt;i&gt;V - {S}&lt;/i&gt; (i.e. &lt;code class=&quot;code&quot;&gt;v_s&lt;/code&gt;) contains all nodes. &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; init src g =&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; init x = &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.equal src x &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; 0.0 &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Float&lt;/span&gt;.infinity &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; d = &lt;span class=&quot;constructor&quot;&gt;List&lt;/span&gt;.fold (&lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.keys g) ~init:&lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.empty&lt;br /&gt;              ~f:(&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; acc x &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.set acc ~key:x ~data:(init x)) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;br /&gt;          {&lt;br /&gt;            src&lt;br /&gt;          ; g&lt;br /&gt;          ; s = &lt;span class=&quot;constructor&quot;&gt;Set&lt;/span&gt;.empty&lt;br /&gt;          ; d&lt;br /&gt;          ; pred = &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.empty&lt;br /&gt;          ; v_s = &lt;span class=&quot;constructor&quot;&gt;Heap&lt;/span&gt;.of_list (&lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.to_alist d)&lt;br /&gt;                ~cmp:(&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; (_, e1) (_, e2) &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Float&lt;/span&gt;.compare e1 e2)&lt;br /&gt;          }&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Relaxing an edge &lt;i&gt;(u, v)&lt;/i&gt; with weight &lt;i&gt;w (u, v)&lt;/i&gt; tests whether the shortest path to &lt;i&gt;v&lt;/i&gt; so far can be improved by going through &lt;i&gt;u&lt;/i&gt; and if so, updating &lt;i&gt;d (v)&lt;/i&gt; and &lt;i&gt;&amp;pi; (v)&lt;/i&gt; accordingly. &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; error = [&lt;br /&gt;          &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Relax&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; vertex_t&lt;br /&gt;        ] [@@deriving sexp]&lt;br /&gt;        &lt;span class=&quot;keyword&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; error [@@deriving sexp]&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; relax state (u, v, w) =&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; {d; pred; v_s; _} = state &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dv = &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.find d v &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Some&lt;/span&gt; dv &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; dv&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; raise (&lt;span class=&quot;constructor&quot;&gt;Error&lt;/span&gt; (&lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Relax&lt;/span&gt; v)) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; du = &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.find d u &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Some&lt;/span&gt; du &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; du&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; raise (&lt;span class=&quot;constructor&quot;&gt;Error&lt;/span&gt; (&lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Relax&lt;/span&gt; u)) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dv &amp;gt; du +. w &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dv = du +. w &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;br /&gt;            (&lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Heap&lt;/span&gt;.find_elt v_s ~f:(&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; (n, _) &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.equal n v) &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Some&lt;/span&gt; tok &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; ignore (&lt;span class=&quot;constructor&quot;&gt;Heap&lt;/span&gt;.update v_s tok (v, dv))&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; raise (&lt;span class=&quot;constructor&quot;&gt;Error&lt;/span&gt; (&lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Relax&lt;/span&gt; v))&lt;br /&gt;            );&lt;br /&gt;            { state &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;              d = &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.change d v&lt;br /&gt;                  ~f:(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;br /&gt;                      &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Some&lt;/span&gt; _ &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Some&lt;/span&gt; dv&lt;br /&gt;                      &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; raise (&lt;span class=&quot;constructor&quot;&gt;Error&lt;/span&gt; (&lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Relax&lt;/span&gt; v))&lt;br /&gt;                    )&lt;br /&gt;            ; pred = &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.set (&lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.remove pred v) ~key:v ~data:u&lt;br /&gt;            }&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; state&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;Here, relaxation can result in a linear heap update operation. A better implementation might seek to avoid that. &lt;/p&gt;&lt;p&gt;One iteration of the body of the loop of Dijkstra's algorithm consists of the node in &lt;i&gt;V - {S}&lt;/i&gt; with the least shortest path weight estimate being moved to &lt;i&gt;S&lt;/i&gt; and its edges relaxed. &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dijkstra_exn src g =&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;rec&lt;/span&gt; loop ({s; v_s; _} &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; state) =&lt;br /&gt;            &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Heap&lt;/span&gt;.is_empty v_s &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; state&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; u = fst (&lt;span class=&quot;constructor&quot;&gt;Heap&lt;/span&gt;.pop_exn v_s) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;br /&gt;              loop (&lt;br /&gt;                &lt;span class=&quot;constructor&quot;&gt;List&lt;/span&gt;.fold (&lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.find_exn g u)&lt;br /&gt;                  ~init:{ state &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; s = &lt;span class=&quot;constructor&quot;&gt;Set&lt;/span&gt;.add s u }&lt;br /&gt;                  ~f:(&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; state (v, w) &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; relax state (u, v, w))&lt;br /&gt;              )&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; loop (init src g)&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dijkstra src g =&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Ok&lt;/span&gt; (dijkstra_exn src g)&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Error&lt;/span&gt; err &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Error&lt;/span&gt; err&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;    &lt;p&gt;The shortest path estimates contained by a value of &lt;code class=&quot;code&quot;&gt;state&lt;/code&gt; is given by the projection &lt;code class=&quot;code&quot;&gt;d&lt;/code&gt;. &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; d state = &lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.to_alist (state.d)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;The shortest paths themselves are easily computed as, &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; path state n =&lt;br /&gt;          &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;rec&lt;/span&gt; loop acc x =&lt;br /&gt;            (&lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;V&lt;/span&gt;.equal x state.src &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; x :: acc&lt;br /&gt;            &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; loop (x :: acc) (&lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.find_exn state.pred x)&lt;br /&gt;            ) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;br /&gt;          loop [] n&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; shortest_paths state =&lt;br /&gt;          &lt;span class=&quot;constructor&quot;&gt;List&lt;/span&gt;.map (&lt;span class=&quot;constructor&quot;&gt;Map&lt;/span&gt;.keys state.g) ~f:(&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; n &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; (n, path state n))&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;which completes the implementation of &lt;code class=&quot;code&quot;&gt;Make&lt;/code&gt;. &lt;p&gt;The following program produces a concrete instance of the shortest path problem (with some evaluation output from the top-level). &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;G&lt;/span&gt; : &lt;span class=&quot;constructor&quot;&gt;Graph&lt;/span&gt;.&lt;span class=&quot;constructor&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; vertex_t = char &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; extern_t = (char * (char * float) list) list&lt;br /&gt;  =&lt;br /&gt;  &lt;span class=&quot;constructor&quot;&gt;Graph&lt;/span&gt;.&lt;span class=&quot;constructor&quot;&gt;Make&lt;/span&gt; (&lt;span class=&quot;constructor&quot;&gt;Char&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; g : &lt;span class=&quot;constructor&quot;&gt;G&lt;/span&gt;.t =&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;G&lt;/span&gt;.of_adjacency&lt;br /&gt;          [ &lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'u'&lt;/span&gt;,  3.0; &lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;, 5.0]&lt;br /&gt;          ; &lt;span class=&quot;string&quot;&gt;'u'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;,  2.0; &lt;span class=&quot;string&quot;&gt;'v'&lt;/span&gt;, 6.0]&lt;br /&gt;          ; &lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'v'&lt;/span&gt;,  4.0; &lt;span class=&quot;string&quot;&gt;'y'&lt;/span&gt;, 6.0; &lt;span class=&quot;string&quot;&gt;'u'&lt;/span&gt;, 1.0]&lt;br /&gt;          ; &lt;span class=&quot;string&quot;&gt;'v'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'y'&lt;/span&gt;,  2.0]&lt;br /&gt;          ; &lt;span class=&quot;string&quot;&gt;'y'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'v'&lt;/span&gt;,  7.0]&lt;br /&gt;          ]&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Ok&lt;/span&gt; g &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; g&lt;br /&gt;  &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Load_error&lt;/span&gt; e &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; failwiths &lt;span class=&quot;string&quot;&gt;&quot;Graph load error : %s&quot;&lt;/span&gt; e &lt;span class=&quot;constructor&quot;&gt;G&lt;/span&gt;.sexp_of_load_error&lt;br /&gt;;;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; (&lt;span class=&quot;constructor&quot;&gt;G&lt;/span&gt;.&lt;span class=&quot;constructor&quot;&gt;Dijkstra&lt;/span&gt;.dijkstra &lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt; g) &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Ok&lt;/span&gt; s &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; s&lt;br /&gt;  &lt;span class=&quot;keywordsign&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keywordsign&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;constructor&quot;&gt;Error&lt;/span&gt; e &lt;span class=&quot;keywordsign&quot;&gt;-&amp;gt;&lt;/span&gt; failwiths &lt;span class=&quot;string&quot;&gt;&quot;Error : %s&quot;&lt;/span&gt; e &lt;span class=&quot;constructor&quot;&gt;G&lt;/span&gt;.&lt;span class=&quot;constructor&quot;&gt;Dijkstra&lt;/span&gt;.sexp_of_error&lt;br /&gt;&lt;br /&gt;;; &lt;span class=&quot;constructor&quot;&gt;G&lt;/span&gt;.&lt;span class=&quot;constructor&quot;&gt;Dijkstra&lt;/span&gt;.d s&lt;br /&gt;- : (char * float) list =&lt;br /&gt;[(&lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt;, 0.); (&lt;span class=&quot;string&quot;&gt;'u'&lt;/span&gt;, 3.); (&lt;span class=&quot;string&quot;&gt;'v'&lt;/span&gt;, 9.); (&lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;, 5.); (&lt;span class=&quot;string&quot;&gt;'y'&lt;/span&gt;, 11.)]&lt;br /&gt;&lt;br /&gt;;; &lt;span class=&quot;constructor&quot;&gt;G&lt;/span&gt;.&lt;span class=&quot;constructor&quot;&gt;Dijkstra&lt;/span&gt;.shortest_paths s&lt;br /&gt;- : (char * char list) list =&lt;br /&gt;[(&lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt;]); (&lt;span class=&quot;string&quot;&gt;'u'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt;; &lt;span class=&quot;string&quot;&gt;'u'&lt;/span&gt;]); (&lt;span class=&quot;string&quot;&gt;'v'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt;; &lt;span class=&quot;string&quot;&gt;'u'&lt;/span&gt;; &lt;span class=&quot;string&quot;&gt;'v'&lt;/span&gt;]); (&lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt;; &lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;]);&lt;br /&gt; (&lt;span class=&quot;string&quot;&gt;'y'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt;; &lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;; &lt;span class=&quot;string&quot;&gt;'y'&lt;/span&gt;])]&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/p&gt;    &lt;p&gt;    &lt;hr/&gt;    &lt;p&gt;      References:&lt;br/&gt;      [1] &quot;Introduction to Algorithms&quot; Section 24.3:Dijkstra's algorithm -- Cormen et. al. (Second ed.) 2001.&lt;br/&gt;    &lt;/p&gt;  &lt;/body&gt;&lt;/html&gt;</content><category scheme="http://www.blogger.com/atom/ns#" term="OCaml"/><category scheme="http://www.blogger.com/atom/ns#" term="Graph"/><category scheme="http://www.blogger.com/atom/ns#" term="Dijkstra"/><category scheme="http://www.blogger.com/atom/ns#" term="Algorithms"/><id>tag:blogger.com,1999:blog-5012565255225108517.post-6297713228015704017</id><title type="text">Dijkstra's algorithm</title><updated>2018-06-10T16:59:33-00:00</updated><author><email>noreply@blogger.com</email><uri>https://plus.google.com/104436573144909855029</uri><name>Shayne Fletcher</name></author></entry><entry><source><updated>2018-08-21T00:00:00-00:00</updated><link title="Drup's thingies" type="text/html" href="https://drup.github.io/" rel="related"/><link title="Drup's thingies" type="application/rss+xml" href="http://drup.github.io/feed-ocaml.xml" rel="self"/><id>https://drup.github.io/</id><title type="text">Drup's thingies</title><author><name>Gabriel Radanne</name></author></source><link href="https://drup.github.io/2018/05/08/regenerate/" rel="alternate"/><content xml:base="http://drup.github.io/feed-ocaml.xml" type="html">
        
        
        
        &lt;p&gt;I’m happy to announce the release of &lt;a href=&quot;https://github.com/Drup/regenerate&quot;&gt;Regenerate&lt;/a&gt;, 
a library, tool and &lt;a href=&quot;https://drup.github.io/regenerate/&quot;&gt;website&lt;/a&gt; to generate test cases for regular expression engines.&lt;/p&gt;


        
        </content><id>https://drup.github.io/2018/05/08/regenerate/</id><title type="text">Ann: Regenerate | Drup's thingies</title><updated>2018-05-08T00:00:00-00:00</updated><author><name>Gabriel Radanne</name></author></entry><entry><source><updated>2018-09-19T08:03:33-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.8</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/04/23/release-of-alt-ergo-2-2-0/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/04/23/release-of-alt-ergo-2-2-0/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;A new release of Alt-Ergo (version 2.2.0) is available.&lt;/p&gt;
&lt;p&gt;You can get it from &lt;a href=&quot;https://alt-ergo.ocamlpro.com/#releases&quot;&gt;Alt-Ergo&amp;#8217;s website&lt;/a&gt;. An OPAM package for it will be published in the next few days.&lt;/p&gt;
&lt;p&gt;The major novelty of this release is a new experimental front-end that supports the SMT-LIB 2 language, extended prenex polymorphism. This extension is implemented as a standalone library, and is available &lt;a href=&quot;https://github.com/OCamlPro/alt-ergo/blob/2.2.0/sources/CHANGES&quot;&gt;here&lt;/a&gt;: &lt;a href=&quot;https://github.com/Coquera/psmt2-frontend&quot;&gt;https://github.com/Coquera/psmt2-frontend&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The full list of CHANGES is available &lt;a href=&quot;https://github.com/OCamlPro/alt-ergo/blob/2.2.0/sources/CHANGES&quot;&gt;here&lt;/a&gt;. As usual, do not hesitate to report bugs, to ask questions, or to give your feedback!&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=1047</id><title type="text">Release of Alt-Ergo 2.2.0</title><updated>2018-04-23T08:00:36-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-04-20T16:00:00-00:00</updated><subtitle type="text">on building functional operating systems</subtitle><rights type="text">All rights reserved by the author</rights><link type="text/html" href="https://mirage.io/blog/" rel="alternate"/><link href="https://mirage.io/blog/atom.xml" rel="self"/><contributor><uri>https://linse.me</uri><name>Stefanie Schirmer</name></contributor><contributor><email>anil@recoil.org</email><uri>http://anil.recoil.org</uri><name>Anil Madhavapeddy</name></contributor><contributor><email>hm519@cam.ac.uk</email><uri>https://github.com/hannesm</uri><name>Hannes Mehnert</name></contributor><contributor><email>thomas@gazagnaire.org</email><uri>http://gazagnaire.org</uri><name>Thomas Gazagnaire</name></contributor><contributor><email>mindy.preston@cl.cam.ac.uk</email><uri>https://github.com/yomimono</uri><name>Mindy Preston</name></contributor><contributor><email>gg417@cl.cam.ac.uk</email><uri>https://github.com/GemmaG</uri><name>Gemma Gordon</name></contributor><contributor><email>drupyog@zoho.com</email><uri>https://github.com/drup</uri><name>Gabriel Radanne</name></contributor><contributor><email>djwillia@us.ibm.com</email><uri>https://github.com/djwillia</uri><name>Dan Williams</name></contributor><contributor><email>haesbaert@haesbaert.org</email><uri>http://www.haesbaert.org/</uri><name>Christiano Haesbaert</name></contributor><contributor><email>amirmc@gmail.com</email><uri>http://amirchaudhry.com</uri><name>Amir Chaudhry</name></contributor><contributor><email>david.mersinjak@cl.cam.ac.uk</email><uri>https://github.com/pqwy</uri><name>David Kaloper</name></contributor><contributor><email>talex5@gmail.com</email><uri>http://roscidus.com/blog/</uri><name>Thomas Leonard</name></contributor><contributor><email>dave@recoil.org</email><uri>http://dave.recoil.org/</uri><name>Dave Scott</name></contributor><contributor><email>jon@recoil.org</email><uri>http://jon.recoil.org</uri><name>Jon Ludlam</name></contributor><contributor><email>jeremy.yallop@cl.cam.ac.uk</email><uri>https://github.com/yallop</uri><name>Jeremy Yallop</name></contributor><contributor><email>mort@cantab.net</email><uri>http://mort.io/</uri><name>Richard Mortier</name></contributor><contributor><email>vb@luminar.eu.org</email><uri>https://github.com/vbmithr</uri><name>Vincent Bernardoff</name></contributor><contributor><email>raphlalou@gmail.com</email><uri>https://github.com/raphael-proust</uri><name>Raphael Proust</name></contributor><id>https://mirage.io/blog/</id><title type="text">The MirageOS Blog</title><author><name>MirageOS</name></author></source><link type="text/html" href="https://mirage.io/blog/2018-visiting-the-camels" rel="alternate"/><content xml:base="https://mirage.io/blog/atom.xml" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Original posted on <a href="https://linse.me/2018/04/20/Visiting-the-camels.html">linse's blog</a>.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/7/7f/Maroc_Marrakech_Jemaa-el-Fna_Luc_Viatour.JPG" alt="Jemaa El Fnaa"/>
Image by Luc Viatour / https://Lucnix.be</p>
<p>In March 2018, I attended my first <a href="http://retreat.mirage.io/">MirageOS hack retreat</a> in Morrocco.
<a href="https://mirage.io/">MirageOS</a> is a library operating system which allows everyone to build very small, specialized operating system kernels that are intended to run directly on the virtualization layer.
The application code itself is the guest operating system kernel, and can be deployed at scale without the need for an extra containerization step in between.
It is written in <a href="https://ocaml.org/learn/description.html">OCaml</a> and each kernel is built only with exactly the code that is necessary for the particular application.
A pretty different approach from traditional operating systems. Linux feels <a href="https://www.linuxcounter.net/statistics/kernel">huge</a> all of a sudden.</p>
<p>I flew in from New York via Casablanca to Marrakesh, and then took a cab to the city center, to the main square, <a href="https://en.wikipedia.org/wiki/Jemaa_el-Fnaa">Jemaa El Fnaa</a>.
At Cafe de France, Hannes was picking me up and we walked back through the labyrinth of the Medina to the hostel Riad &quot;Priscilla&quot; where we lived with about 20 MirageOS folks, two <a href="https://www.instagram.com/p/BgPaVbuD3Y3/?taken-by=l1ns3">turtles</a> and a dog.
We ate some food, and there were talks about Mirage's quickcheck-style fuzzing library <a href="https://github.com/stedolan/crowbar">Crowbar</a>, and an API realized on top of a message queue written in OCaml.</p>
<p>Coming from compiler construction in Haskell and building &quot;stateless&quot; services for information retrieval in Scala, I have a good grasp of functional programming. The funny problem is I don't know much about OCaml yet.</p>
<p>At Etsy, I was part of the Core Platform team where we first <a href="https://www.youtube.com/watch?v=75j1RRxxARI">used hhvm</a> (Facebook's hip-hop virtual machine) on the API cluster, and then advocated to use their gradually typed <a href="http://hacklang.org/">&quot;hack&quot; language</a> to introduce typing to the gigantic PHP codebase at Etsy. Dan Miller and I added types to the codebase with Facebook's <a href="https://docs.hhvm.com/hack/tools/hackificator"><code>hackificator</code></a>, but then
PHP 7 added the possibility of type annotations and great speedups, and PHP's own static analyzer <a href="https://github.com/phan/phan"><code>phan</code></a> was developed by Rasmus Lerdorf and Andrew Morrison to work with PHP's types.
We abandoned the hackification approach.
Why is this interesting? These were my first encounters with OCaml! The <a href="https://docs.hhvm.com/hack/typechecker/introduction">hack typechecker</a> is written in OCaml, and Dan and I have read it to understand the gradual typing approach.
Also, we played with <a href="https://github.com/facebook/pfff/wiki/Main"><code>pfff</code></a>, a tool written in OCaml that allows structural edits on PHP programs, based on the abstact syntax tree.
I made a list to translate between Haskell and OCaml syntax, and later Maggie Zhou and I used <code>pfff</code> to <a href="https://codeascraft.com/author/sschirmer/">unify</a> the syntax of several hundred endpoints in Etsy's internal API.</p>
<p>At the MirageOS retreat, I started my week reading <a href="https://dev.realworldocaml.org/">&quot;Real World OCaml&quot;</a>, but got stuck because the examples did not work with the buildsystem used in the book. Stephen helped me to find a workaround, I made a PR to the book but it was closed since it is a temporary problem. Also, I started reading about OCaml's <a href="https://mirage.io/wiki/tutorial-lwt">&quot;lwt&quot; library</a> for concurrent programming. The abbreviation stands for lightweight threads and the library provides a monadic way to do multithreading, really similar to <a href="https://twitter.github.io/util/docs/com/twitter/util/Future.html">twitter futures</a> in Scala. Asynchronous calls can be made in a thread, which then returns at some point when the call was successful or failed. We can  do operations &quot;inside&quot; lwt with bind (<code>&gt;&gt;=</code>) in the same way we can flatMap over Futures in scala. The library also provides ways to run multiple threads in sequence or in parallel, and to block and wait.
In the evening, there was a talk about a <a href="https://github.com/cfcs/mirage-ocra-demo">high-end smart card</a> that based on a private start value can provide a succession of keys. The hardware is interesting, being the size of a credit card it has a small keypad and a screen. Some banks use these cards already (for their TAN system?), and we all got a sample card to play with.</p>
<p>One day I went swimming with Lix and Reynir, which was quite the adventure since the swimming pool was closed and we were not sure what to do. We still made it to the part that was still open, swam a lot and then got a cake for Hannes birthday which lead to a cake overflow since there were multiple cakes and an awesome party with candles, food and live music already. :D Thanks everyone for organizing!! Happy birthday Hannes!</p>
<p>I started reading another book, <a href="http://ocaml-book.com/">&quot;OCaml from the very beginning&quot;</a>, and working through it with Kugg. This book was more focused on algorithms and the language itself than on tooling and libraries, and the exercises were really fun to solve. Fire up OCaml's REPL <a href="https://github.com/diml/utop"><code>utop</code></a> and go! :D</p>
<p>At the same time I started reading the code for <a href="https://github.com/solo5/solo5">solo5</a> to get an understanding of the underlying hypervisor abstraction layer and the backends we compile to. This code is really a pleasure to read.
It is called solo5 because of MirageOS's system calls, initially a set of 5 calls to the hypervisor, called hypercalls which sounds really futuristic. :D</p>
<p>So that's the other fun problem: I don't know too much about kernel programming yet. I did the <a href="http://eudyptula-challenge.org/">Eudyptula (Linux kernel) challenge</a>, an email-based challenge that sends you programming quests to learn about kernel programming.
Over the course of the challenge, I've made my own Linux kernel module that says &quot;Hello world!&quot; but I have not built anything serious yet.</p>
<p>The next things I learned were <a href="https://mirage.io/wiki/hello-world">configuring and compiling</a> a MirageOS unikernel. Hannes showed me how this works.
The config system is powerful and can be tailored to the unikernel we are about to build, via a config file.
After configuring the build, we can build the kernel for a target backend of our choice. I started out with compiling to Unix, which means all network calls go through unix pipes and the unikernel runs as a simple unix binary in my host system, which is really useful for testing.</p>
<p>The next way to run MirageOS that I tried was running it in ukvm. For this setup you have to change the networking approach so that you can talk from the host system to you unikernel inside ukvm. In Linux you can use the Tun/Tap loopback interface for networking to wire up this connection.</p>
<p>We had a session with <a href="https://hackingwithcare.in/about-2/">Jeremie</a> about our vision for MirageOS which was super fun, and very interesting because people have all kinds of different backgrounds but the goals are still very aligned.</p>
<p>Another thing I learned was how to look at network traffic with <a href="https://www.wireshark.org/">wireshark</a>. <a href="https://s4y.us/">Sidney</a> and I had previously recorded a TLS handshake with tcpdump and looked at the binary data in the pcap file with &quot;hexfiend&quot; next to Wikipedia to decode what we saw.
Derpeter gave me a nice introduction about how to do this with wireshark, which knows about most protocols already and will do the decoding of the fields for us. We talked about all layers of the usual stack, other kinds of internet protocols, the iptables flow, and bgp / <a href="https://www.peeringdb.com/net/12276">peeringDB</a>. Quite interesting and I feel I have a pretty good foundational understanding about how the internet actually works now.</p>
<p>During the last days I wanted to write a unikernel that does something new, and I thought about monitoring, as there is no monitoring for MirageOS yet. I set up a <a href="https://grafana.com/">grafana</a> on my computer and sent some simple data packets to grafana from a unikernel, producing little peaks in a test graph. Reynir and I played with this a bit and restructured the program.</p>
<p>After this, the week was over, I walked back to Jemaa el Fnaa with Jeremie, I feel I learned a ton and yet am still at the very beginning, excited what to build next. On the way back I got stuck in a weird hotel in Casablanca due to the flight being cancelled, where I bumped into a Moroccan wedding and met some awesome travelling women from Brazil and the US who also got stuck. All in all a fun adventure!</p>
<p><img src="https://scontent-frt3-2.cdninstagram.com/vp/b7383ad87744d99eae8940b38789fc94/5B58DFFC/t51.2885-15/e35/28764104_231320117439563_2956918922680467456_n.jpg" alt=""/></p>
</div></content><id>https://mirage.io/blog/2018-visiting-the-camels</id><title type="text">Visiting the camels - MirageOS spring hack retreat 2018</title><updated>2018-04-20T16:00:00-00:00</updated><author><uri>https://linse.me</uri><name>Stefanie Schirmer</name></author></entry><entry><summary type="text">&lt;p&gt;More than three years ago we launched our Bitcoin Piñata as a transparent security bait.  It is still up and running!&lt;/p&gt;
</summary><source><updated>2018-04-29T11:40:10-00:00</updated><link href="https://hannes.nqsb.io/atom" rel="self"/><id>urn:uuid:981361ca-e71d-4997-a52c-baeee78e4156</id><title type="text">full stack engineer</title><author><name>Hannes Mehnert</name></author></source><published>2018-04-18T11:38:06-00:00</published><link href="https://hannes.nqsb.io/Posts/Pinata" rel="alternate"/><content xml:base="https://hannes.nqsb.io/atom" type="html">

&lt;h2 id=&quot;History&quot;&gt;History&lt;/h2&gt;

&lt;p&gt;On February 10th 2015 David Kaloper-Meršinjak and Hannes Mehnert
&lt;a href='https://mirage.io/announcing-bitcoin-pinata'&gt;launched&lt;/a&gt; (read also &lt;a href='http://amirchaudhry.com/bitcoin-pinata'&gt;Amir&amp;#39;s
description&lt;/a&gt;) our &lt;a href='https://en.wikipedia.org/wiki/Bug_bounty_program'&gt;bug bounty
program&lt;/a&gt; in the form of our
&lt;a href='http://ownme.ipredator.se'&gt;Bitcoin Piñata&lt;/a&gt; MirageOS unikernel.  Thanks again to
&lt;a href='https://ipredator.se'&gt;IPredator&lt;/a&gt; for both hosting our services and lending us
the 10 Bitcoins!  We &lt;a href='https://mirage.io/blog/bitcoin-pinata-results'&gt;analysed&lt;/a&gt; a
bit more in depth after running it for five months.  Mindy recently wrote about
&lt;a href='https://somerandomidiot.com/blog/2018/04/17/whacking-the-bitcoin-pinata/'&gt;whacking the Bitcoin
Piñata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On March 18th 2018, after more than three years, IPredator, the lender of the Bitcoins, repurposed the 10 Bitcoins for other projects.  Initially, we thought that the Piñata would maybe run for a month or two, but IPredator, David, and I decided to keep it running.  The update of the Piñata&amp;#39;s bounty is a good opportunity to reflect on the project.&lt;/p&gt;
&lt;p&gt;The 10 Bitcoin in the Piñata were fluctuating in price over time, at peak worth 165000€.&lt;/p&gt;
&lt;p&gt;From the start of the Piñata project, we published the &lt;a href='https://github.com/mirleft/btc-pinata'&gt;source code&lt;/a&gt;, the virtual machine image, and the versions of the used libraries in a git repository.  Everybody could develop their exploits locally before launching them against our Piñata.  The Piñata provides TLS endpoints, which require private keys and certificates.  These are generated by the Piñata at startup, and the secret for the Bitcoin wallet is provided as a command line argument.&lt;/p&gt;
&lt;p&gt;Initially the Piñata was deployed on a Linux/Xen machine, later it was migrated to a FreeBSD host using BHyve and VirtIO with &lt;a href='https://github.com/solo5/solo5'&gt;solo5&lt;/a&gt;, and in December 2017 it was migrated to native BHyve (&lt;a href='/Posts/Solo5'&gt;using &lt;code&gt;ukvm-bin&lt;/code&gt; and solo5&lt;/a&gt;).  We also changed the Piñata code to accomodate for updates, such as the &lt;a href='https://mirage.io/blog/announcing-mirage-30-release'&gt;MirageOS 3.0 release&lt;/a&gt;, and the discontinuation of floating point numbers for timestamps (asn1-combinators 0.2.0, x509 0.6.0, tls 0.9.0).&lt;/p&gt;
&lt;h2 id=&quot;Motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;We built the Piñata for many purposes: to attract security professionals to evaluate our &lt;a href='https://mirage.io/blog/introducing-ocaml-tls'&gt;from-scratch developed TLS stack&lt;/a&gt;, to gather empirical data for our &lt;a href='https://usenix15.nqsb.io'&gt;Usenix Security 15 paper&lt;/a&gt;, and as an improvement to current bug bounty programs.&lt;/p&gt;
&lt;p&gt;Most bug bounty programs require communication via forms and long wait times for
human experts to evaluate the potential bug.  This evaluation is subjective,
intransparent, and often requires signing of non-disclosure agreements (NDA),
even before the evaluation starts.&lt;/p&gt;
&lt;p&gt;Our Piñata &lt;em&gt;automates&lt;/em&gt; these parts, getting rid of wait times and NDAs.  To get
the private wallet key that holds the bounty, you need to successfully establish
an authenticated TLS session or find a flaw elsewhere in the stack, which allows
to read arbitrary memory.  Everyone can track transactions of the blockchain and
see if the wallet still contains the bounty.&lt;/p&gt;
&lt;p&gt;Of course, the Piñata can&amp;#39;t prove that our stack is secure, and it can&amp;#39;t prove
that the access to the wallet is actually inside.  But trust us, it is!&lt;/p&gt;
&lt;h2 id=&quot;Observations&quot;&gt;Observations&lt;/h2&gt;

&lt;p&gt;I still remember vividly the first nights in February 2015, being so nervous that I woke up every two hours and checked the blockchain.  Did the Piñata still have the Bitcoins?  I was familiar with the code of the Piñata and was afraid there might be a bug which allows to bypass authentication or leak the private key.  So far, this doesn&amp;#39;t seem to be the case.&lt;/p&gt;
&lt;p&gt;In April 2016 we stumbled upon an &lt;a href='/Posts/BadRecordMac'&gt;information disclosure in the virtual network
device driver for Xen in MirageOS&lt;/a&gt;.  Given enough
bandwidth, this could have been used to access the private wallet key.  We
upgraded the Piñata and released the &lt;a href='https://mirage.io/blog/MSA00'&gt;MirageOS Security Advisory
00&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We analysed the Piñata&amp;#39;s access logs to the and bucketed them into website traffic and bounty connections.  We are still wondering what happened in July 2015 and July 2017 where the graph shows spikes.  Could it be a presentation mentioning the Piñata, or a new automated tool which tests for TLS vulnerabilities, or an increase in market price for Bitcoins?&lt;/p&gt;
&lt;p&gt;&lt;img src='/static/img/pinata_access_20180403.png' alt='Piñata access' /&gt; &lt;img src='/static/img/pinata_access_cumulative_20180403.png' alt='Piñata access cumulative' /&gt;&lt;/p&gt;
&lt;p&gt;The cumulative graph shows that more than 500,000 accesses to the Piñata website, and more than 150,000 attempts at connecting to the Piñata bounty.&lt;/p&gt;
&lt;p&gt;You can short-circuit the client and server Piñata endpoint and observe the private wallet key being transferred on your computer, TLS encrypted with the secret exchanged by client and server, using &lt;code&gt;socat -x TCP:ownme.ipredator.se:10000 TCP:ownme.ipredator.se:10002&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you attempted to exploit the Piñata, please let us know what you tried!  Via&lt;/p&gt;
&lt;strike&gt;[twitter](https://twitter.com/h4nnes)&lt;/strike&gt;&lt;p&gt;&lt;a href='http://mastodon.social/@hannesm'&gt;hannesm@mastodon.social&lt;/a&gt; or a &lt;a href='https://github.com/hannesm/hannes.nqsb.io/issues'&gt;GitHub
issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since &lt;a href='/Posts/DNS'&gt;the start of 2018&lt;/a&gt; we are developing robust software and systems at &lt;a href='http://robur.io'&gt;robur&lt;/a&gt;.  If you like our work and want to support us with donations or development contracts, please get in touch with &lt;code&gt;team@robur.io&lt;/code&gt;.  Robur is a project of the German non-profit &lt;a href='https://techcultivation.org'&gt;Center for the cultivation of technology&lt;/a&gt;.  Donations to robur are tax-deductible in Europe.&lt;/p&gt;
</content><category scheme="https://hannes.nqsb.io/tags/mirageos" term="mirageos"/><category scheme="https://hannes.nqsb.io/tags/security" term="security"/><category scheme="https://hannes.nqsb.io/tags/bitcoin" term="bitcoin"/><id>urn:uuid:6b3a0f19-4bee-5a7d-83dd-547f41c09dbb</id><title type="text">The Bitcoin Piñata - no candy for you</title><updated>2018-04-18T11:48:41-00:00</updated><author><name>hannes</name></author></entry><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/145.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">
The &lt;a href=&quot;https://github.com/coq/coq/releases/tag/V8.8.0&quot;&gt;final release of Coq 8.8.0&lt;/a&gt; is
available. It features better performances, tactic improvements, many
enhancements for universe users, a new Export modifier for setting options,
support for goal selectors in front of focusing brackets and a new experimental
-mangle-names option for linting proof scripts.

Feedback and &lt;a href=&quot;https://github.com/coq/coq/issues&quot;&gt;bug reports&lt;/a&gt; are extremely welcome.&lt;/p&gt;


 </content><id>https://coq.inria.fr/news/145.html</id><title type="text">Coq 8.8.0 is out</title><updated>2018-04-17T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2018-09-19T08:03:33-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.8</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/04/13/taskforce-on-the-tezos-protocol-and-tzscan-evolution/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/04/13/taskforce-on-the-tezos-protocol-and-tzscan-evolution/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;As we are preparing to &lt;a href=&quot;https://twitter.com/TezosFoundation/status/984814729213480960&quot;&gt;work on the Tezos Protocol&lt;/a&gt;, we&amp;#8217;re still actively keeping the pace on the block explorer TZScan.io, adding cool information for baking accounts. We&amp;#8217;d like to allow people to see who is contributing to the network and to understand the distribution of rolls, rights, etc.&lt;/p&gt;
&lt;p&gt;For starters, we are showing the roll balance used for baking in the current cycle and the rolls history of a baker.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://tzscan.io/tz1MqVR7hnZwH1FoQ7swjamanNxrXtNVAQ7v?default=baking&quot;&gt;http://tzscan.io/tz1MqVR7hnZwH1FoQ7swjamanNxrXtNVAQ7v?default=baking&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Enjoy, more to come in the next weeks!&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=1029</id><title type="text">Taskforce on the Tezos Protocol, and Tzscan evolution</title><updated>2018-04-13T17:12:24-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-05-22T08:00:00-00:00</updated><logo>http://gallium.inria.fr/blog/</logo><link title="Gagallium" type="text/html" href="http://gallium.inria.fr/blog/index.rss" rel="related"/><link title="Gagallium" type="application/rss+xml" href="http://gallium.inria.fr/blog/index.rss" rel="self"/><generator>Stog</generator><id>http://gallium.inria.fr/blog/index.rss</id><title type="text">Gagallium</title><author><name>GaGallium</name></author></source><link href="http://gallium.inria.fr/blog/how-to-quantify-quantifiers-an-ltac-puzzle" rel="alternate"/><content xml:base="http://gallium.inria.fr/blog/index.rss" type="html">

&lt;p&gt;In some occasions, using the Coq proof assistant stops resembling a normal software development activity, and becomes more similar to puzzle solving.&lt;/p&gt;
&lt;p&gt;Similarly to the excellent video games of the Zachtronics studio (TIS-100, SpaceChem, …), the system provides you with puzzles where obstacles have to be side-stepped using a fair amount of tricks and ingenuity, and finally solving the problem has often no other utility than the satisfaction of having completed it.&lt;/p&gt;
&lt;p&gt;In this blog-post, I would like to present what I think is one such situation. What the puzzle is, how we solved it, and why you shouldn’t probably do that if you like spending your time in a useful manner.&lt;/p&gt;




&lt;h1 id=&quot;prelude&quot;&gt;Prelude&lt;/h1&gt;
&lt;p&gt;A few months ago, I was wondering if it was possible to count the number of &lt;code&gt;exists&lt;/code&gt; in front of the goal, using &lt;code&gt;Ltac&lt;/code&gt; (the tactic language of Coq). That is, write a tactic that would for example produce &lt;code&gt;3&lt;/code&gt; on the following goal:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;o&quot;&gt;====================================&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;“That’s easy”, I thought. “I will just write a recursive function in Ltac”. First, we check that we can get the body of the &lt;code&gt;exists&lt;/code&gt; by matching on the goal – this seems to work as expected:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;Goal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;idtac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;(* Prints (exists y z : nat, x + y = z) *)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, we write a tactic to do this recursively, walking down the type of the goal until there is no &lt;code&gt;exists&lt;/code&gt; in front of it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;Ltac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_exists_naive_aux&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lazymatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_exists_naive_aux&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;Ltac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_exists_naive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_exists_naive_aux&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But this does not work, and fails with the error below. It seems Ltac does not handle terms with free variables.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evaluate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;offending&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constr_under_binders&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, the reasonable choice would be to give up, write specialized versions of the tactic for 0 to 7 exists (who has goals with more than 7 exists anyway?), and wait for one of the successors of Ltac (Ltac2 maybe?) to come up without these limitations. Unreasonably, I sought the help of Cyprien Mangin, my local puzzle game and Coq expert, and we came up with the following solution.&lt;/p&gt;
&lt;h1 id=&quot;a-first-idea-destructing-the-goal&quot;&gt;A first idea: “destruct”ing the goal&lt;/h1&gt;
&lt;p&gt;A first idea: one thing that we can do iteratively on a &lt;code&gt;exists x y z ...&lt;/code&gt; term is splitting it using &lt;code&gt;destruct&lt;/code&gt; – &lt;em&gt;if we have it as an hypothesis&lt;/em&gt;. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;c&quot;&gt;(* Goal:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   H : exists x y z : nat, x + y = z&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ====================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;     True&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*)&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;Ltac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_in_hyp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lazymatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;destruct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_in_hyp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;count_in_hyp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Goal:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   x, x0, x1 : nat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   H : x + x0 = x1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   n := 3 : nat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ====================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;     True&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice we had to do the “standard trick” of writing the tactic in continuation passing style (using &lt;code&gt;kont&lt;/code&gt; here as a continuation to return the number of &lt;code&gt;exists&lt;/code&gt;). This is required since a Ltac tactic cannot do side-effects on the goal (here, &lt;code&gt;destruct&lt;/code&gt;) and at the same time return a term.&lt;/p&gt;
&lt;p&gt;Now, we want to count the number of exists &lt;em&gt;in the goal&lt;/em&gt;, not in an hypothesis. How could we turn the goal into an hypothesis – after all, these exists are something we need to provide, not something we get. In fact, it is possible to get a sub-goal with an hypothesis of the same type as the goal – simply, this sub-goal won’t be much relevant for proving the goal. We define the following helper lemma:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;Definition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helper_lemma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q_proof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q_proof&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Applying this lemma produces an extra sub-goal with an hypothesis of type &lt;code&gt;P&lt;/code&gt;. Notice how the proof term corresponding to this sub-goal is completely discarded in the definition of &lt;code&gt;helper_lemma&lt;/code&gt;: this sub-goal is only relevant for our Ltac tricks. To get a sub-goal which allows destructing the exists in front of the goal, we do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;c&quot;&gt;(* Goal:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ====================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;     exists x y z : nat, x + y = z&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helper_lemma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;intro&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Goal 1:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   H : exists x y z : nat, x + y = z&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ====================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;     True&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;   Goal 2:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ====================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;     exists x y z : nat, x + y = z&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;count_in_hyp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Goal 1:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   x, x0, x1 : nat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   H : x + x0 = x1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   n := 3 : nat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ====================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;     True&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;   Goal 2:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ====================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;     exists x y z : nat, x + y = z&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;second-idea-communicating-through-evars&quot;&gt;Second idea: communicating through evars&lt;/h1&gt;
&lt;p&gt;We are not done yet: we can count the number of exists in the first – dummy – sub-goal, but we need to transmit this information to the main sub-goal.&lt;/p&gt;
&lt;p&gt;The second idea is to propagate this information using an “evar”. An evar is a Coq term representing a “hole”: its definition is not known yet, and will be given later in the proof. This discipline only exists when constructing the proof: evars do not appear in the proof term, where everything happens in order.&lt;/p&gt;
&lt;p&gt;The idea here is to introduce an evar before applying our auxiliary &lt;code&gt;helper_lemma&lt;/code&gt;. This evar will appear in the context of both sub-goals introduced by the lemma: in the first one, we can “instantiate” it (ie. set its definition) with the number of exists computed, and use it in the second sub-goal.&lt;/p&gt;
&lt;p&gt;This gives us:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;  &lt;span class=&quot;n&quot;&gt;evar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Goal:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   n := ?n : nat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ====================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;     exists x y z : nat, x + y = z&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helper_lemma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;intro&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_in_hyp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;exact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Goal:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   n := 3 : nat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ====================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;     exists x y z : nat, x + y = z&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hurray! It works. We can wrap this in a reusable tactic:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;Ltac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_in_ty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fresh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;evar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helper_lemma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fresh&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;intro&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_in_hyp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;exact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;third-idea-cleaning-up&quot;&gt;Third idea: cleaning up&lt;/h1&gt;
&lt;p&gt;The tactic above indeed works, and successfully counts the number of exists in the goal. However, it is still a bit messy. In particular, the trick of using a helper lemma shows up in the proof term. Using &lt;code&gt;Show Proof&lt;/code&gt; after running &lt;code&gt;count_in_ty&lt;/code&gt; on the goal yields:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;helper_lemma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex_intro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex_intro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex_intro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Goal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is mostly noise! Indeed, &lt;code&gt;helper_lemma P Q H1 H2&lt;/code&gt; is equivalent to simply &lt;code&gt;H2&lt;/code&gt; – we only use the lemma for our Ltac tricks, and ideally, this should not appear in the final proof term. We can do better. The third idea is to isolate the messy proof term containing &lt;code&gt;helper_lemma&lt;/code&gt;, and simplify it after it has been produced by counting the exists. Isolating the proof term can be achieved with the following pattern:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ltac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mytactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;constr:()&lt;/code&gt; and &lt;code&gt;ltac:()&lt;/code&gt; are both quotations: the first one indicates that its contents must be parsed as a Coq term, and the second one that it must be parsed as a tactic. Their combination above indicates that we want to produce a term (of type &lt;code&gt;nat&lt;/code&gt;), and to run the tactic &lt;code&gt;mytactic&lt;/code&gt; to produce it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mytactic&lt;/code&gt; will run on a goal of type &lt;code&gt;nat&lt;/code&gt;, and the proof term it produces by proving this goal will become the definition of &lt;code&gt;n&lt;/code&gt;. Let us replace &lt;code&gt;mytactic&lt;/code&gt; by our counting tactic (its continuation being simply &lt;code&gt;exact&lt;/code&gt; to prove the &lt;code&gt;nat&lt;/code&gt; goal using the result of the count):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;c&quot;&gt;(* Goal:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ====================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;     exists x y z : nat, x + y = z&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ltac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_in_ty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;exact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Goal:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   n := ((let n := 3 in&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;          helper_lemma (exists x y z : nat, x + y = z) nat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;            (fun H : exists x y z : nat, x + y = z =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;             match H with&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;             | ex_intro _ x (ex_intro _ x0 (ex_intro _ _ _)) =&amp;gt; I&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;             end) n)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;         :&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;         nat) : nat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ============================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   exists x y z : nat, x + y = z&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The messy proof-term is now part of the definition. We now just have to simplify it, e.g. using &lt;code&gt;eval cbv in n&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ltac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_in_ty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;exact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;cbv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Goal:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   n := 3 : nat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   ============================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;   exists x y z : nat, x + y = z&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*)&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;Proof&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Prints: (let n := 3 in ?Goal) *)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And there you have it! Here is the whole implementation of &lt;code&gt;count_exists&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;Ltac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_in_hyp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lazymatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;destruct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_in_hyp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;Definition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helper_lemma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q_proof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q_proof&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;Ltac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_in_ty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fresh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;evar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helper_lemma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fresh&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;intro&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_in_hyp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;exact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;Ltac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ltac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_in_ty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;exact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;cbv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kont&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



</content><id>http://gallium.inria.fr/blog/how-to-quantify-quantifiers-an-ltac-puzzle</id><title type="text">How to quantify quantifiers: an Ltac puzzle</title><updated>2018-04-05T08:00:00-00:00</updated><author><name>Armaël Guéneau</name></author></entry><entry><source><updated>2018-09-19T08:03:33-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.8</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/04/01/ocaml-jtrt/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/04/01/ocaml-jtrt/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;This time of the year is, just like Christmas time, a time for laughs and magic&amp;#8230; although the magic we are talking about, in the OCaml community, is not exactly nice, nor beautiful. Let&amp;#8217;s say that we are somehow akin to many religions: we know magic &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Obj.html#VALmagic&quot;&gt;&lt;em&gt;does&lt;/em&gt; exist&lt;/a&gt; , but that it is &lt;a href=&quot;https://en.wikipedia.org/wiki/Religious_debates_over_the_Harry_Potter_series&quot;&gt;satanic and shouldn&amp;#8217;t be introduced to children&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Introducing Just The Right Time (JTRT)&lt;/h1&gt;
&lt;p&gt;Let me first introduce you to the concept of &amp;#8216;Just The Right Time&amp;#8217; &lt;a href=&quot;#footnote1&quot;&gt;[1]&lt;/a&gt;. JTRT is somehow a &amp;#8216;Just In Time&amp;#8217; compiler, but one that runs at &lt;em&gt;the&lt;/em&gt; right time, not at some random moment decided by a contrived heuristic.&lt;/p&gt;
&lt;p&gt;How does the compiler know when that specific good moment occurs? Well, he doesn&amp;#8217;t, and that&amp;#8217;s the point: you certainly know far better. In the OCaml world, we like good performances, like any other, but we prefer predictable ones to performances that may sometimes be awesome, and sometimes really slow. And we are ready to trade off some annotations for better predictability (&lt;em&gt;or is it just me trying to give the impression that my opinion is everyone&amp;#8217;s opinion&amp;#8230;&lt;/em&gt;). Don&amp;#8217;t forget that OCaml is a compiled language; hence the average generated code is good enough. Runtime compilation only matters for some subtle situations where a patterns gets repeated a lot, and you don&amp;#8217;t know about that pattern before receiving some inputs.&lt;/p&gt;
&lt;p&gt;Of course the tradeoff wouldn&amp;#8217;t be the same in Javascript if you had to write something like that to get your code to perform decently.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;function fact(n) {
   &quot;compile this&quot;;
   if (n == 0) {
      &quot;compile this too&quot;;
      return 1
   } else {
      &quot;Yes, I really want to compile that&quot;;
      return (n * fact(n - 1););
   }
 }&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h1&gt;The magical &amp;#8216;this_is_the_right_time&amp;#8217; function&lt;/h1&gt;
&lt;p&gt;There are already nice tools for doing that in OCaml. In particular, you should look at metaocaml, which is an extension of the language that has been maintained for years. But it requires you to think a bit about what your program is doing and add a few types, here and there.&lt;/p&gt;
&lt;p&gt;Fortunately, today is the day you may want to try this ugly weekend hack instead.&lt;/p&gt;
&lt;p&gt;To add a bit of context, let&amp;#8217;s say there are 1/ the Dirty Little Tricks, and 2/ the Other Kind of Ugly Hacks. We are presenting one of the latter; the kind of hacks for which you are both ashamed &lt;em&gt;and&lt;/em&gt; a bit proud (but you should really be a lot more ashamed). I&amp;#8217;ve made quite a few of those, and this one would probably rank well among the top 5 (and I&amp;#8217;m deeply sorry about the other ones that are still in production somewhere&amp;#8230;).&lt;/p&gt;
&lt;p&gt;This is composed of two parts: a small compiler patch, and a runtime library. That library only exposes the following single function:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;val this_is_the_right_time : 'a -&amp;gt; 'a
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;#8217;s take an example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;let f x =
  let y = x + x in
  let g z = z * y in
  g

let multiply_by_six = f 3
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can &amp;#8216;optimize&amp;#8217; it by changing it to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;let f x =
  let y = x + x in
  let g z = z * y in
  g

let multiply_by_six = this_is_the_right_time (f 3)
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;#8217;s all. By stating that this is the right time, you told the compiler to take that function and do its magic on it.&lt;/p&gt;
&lt;h1&gt;How &lt;em&gt;the f**k&lt;/em&gt; does that work?!&lt;/h1&gt;
&lt;p&gt;The compiler patch is quite simple. It adds to every function some annotation to allow the compiler to know enough things about it. (It is annotated with its representation in the Flambda IR.) This is just a partial dump of the compiler memory state when transforming the Flambda IR to clambda. I tried to do it in some more &amp;#8216;disciplined&amp;#8217; way (it used some magic to traverse the compiler internal memory representation to create a static version of it in the binary), but &amp;#8216;ld&amp;#8217; was not so happy linking a ~500MB binary. So I went the &amp;#8216;marshal&amp;#8217; way.&lt;/p&gt;
&lt;p&gt;This now means that at runtime the program can find the representation of the closures. To give an example of the kind of code you really shouldn&amp;#8217;t write, here is the magic invocation to retrieve that representation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt; let extract_representation_from_closure (value:'a)
                                 : Flambda.set_of_closures =
   let obj = Obj.repr value in
   let size = Obj.size obj in
   let id = Obj.obj (Obj.field obj (size - 2)) in
   let marshalled = Obj.field obj (size - 1) in
   (Marshal.from_string marshalled 0).(id)
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;With that, we now know the layout of the closure and we can extract all the variables that it binds. We can further inspect the value of those bound variables, and build an IR representation for them. That&amp;#8217;s the nice thing about having an untyped IR, you can produce some even when you lost the types. It will just probably be quite wrong, but who cares&amp;#8230;&lt;/p&gt;
&lt;p&gt;Now that we know everything about our closure, we can rebuild it, and so will we. As we can&amp;#8217;t statically build a non-closed function (the flambda IR happens after closure conversion), we will instead build a closed function that allocates the closure for us. For our example, it would look like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt; let build_my_closure previous_version_of_the_closure =
   let closure_field_y = previous_version_of_the_closure.y in
   fun z -&amp;gt; z * 6 (* closure_field_y * closure_field_y *)
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;In that case the function that we are building is closed, so we don&amp;#8217;t need the old closure to extract its field. But this shows the generic pattern. This would be used like that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt; let this_is_the_right_time optimize_this =
   let ir_version = extract_representation_from_closure optimize_this in
   let build_my_closure = magic_building_function ir_version in
   build_my_closure optimize_this
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I won&amp;#8217;t go too much into the details of the &amp;#8216;magic_building_function&amp;#8217;, because it would be quite tedious. Let&amp;#8217;s just say that it is using mechanisms provided for the native toplevel of OCaml.&lt;/p&gt;
&lt;h1&gt;A more sensible example&lt;/h1&gt;
&lt;p&gt;To finish on something a bit more interesting than &amp;#8216;time_6&amp;#8217;, let&amp;#8217;s suppose that we designed a super nice language whose AST and evaluator are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt; type expr =
 | Add of expr * expr
 | Const of int
 | Var

let rec eval_expr expr x =
  match expr with
  | Add (e1, e2) -&amp;gt; eval_expr e1 x + eval_expr e2 x
  | Const i -&amp;gt; i
  | Var -&amp;gt; x
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;But we want to optimize it a bit, and hence wrote a super powerful pass:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt; let rec optimize expr =
   match expr with
   | Add (Const n1, Add (e, Const n2)) -&amp;gt; Add (Const (n1 + n2), optimize e)
   | Add (e1, e2) -&amp;gt; Add (optimize e1, optimize e2)
   | _ -&amp;gt; expr
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The user writes some expression, that gets parsed to &lt;code&gt;Add (Const 11, Add (Var, Const 22))&lt;/code&gt;, it goes through optimizing and results in &lt;code&gt;Add (Const 33, Var)&lt;/code&gt;. Then you find that this looks like &lt;em&gt;the right time&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;let optimized =
   this_is_the_right_time 
        (fun x -&amp;gt; (eval_expr (optimize user_ast) x))
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Annnnd&amp;#8230; nothing happens. The reason being that there is no way to distinguish between mutable and immutable values at runtime, hence the safe assumption is to assume that everything is mutable, which limits optimizations a lot. So let&amp;#8217;s enable the &amp;#8216;special&amp;#8217; mode:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;incorrect_mode := true&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And MAGIC happens! The code that gets spitted out is exactly what we want (that is &lt;code&gt;fun x -&amp;gt; 33 + x&lt;/code&gt;).&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Just so that you know, I don&amp;#8217;t really recommend using it. It&amp;#8217;s buggy, and many details are left unresolved (I suspect that the names you would come up for that kind of &lt;em&gt;details&lt;/em&gt; would often sound like &amp;#8216;segfault&amp;#8217;). Flambda was not designed to be used that way. In particular, there are some invariants that must be maintained, like the uniqueness of variables and functions&amp;#8230; that we completely disregarded. That lead to some &amp;#8216;funny&amp;#8217; behaviors (like &amp;#8216;power 2 8&amp;#8242; returning 512&amp;#8230;). It is possible to do that correctly, but that would require far more than a few hours&amp;#8217; hacking. This might be a lot easier with the upcoming version of Flambda.&lt;/p&gt;
&lt;p&gt;So this is far from ready, and it&amp;#8217;s not going to be anytime soon (&lt;em&gt;supposing that this is a good idea, which I&amp;#8217;m still not convinced it is&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;But if you still want to play with it: &lt;a href=&quot;https://github.com/chambart/ocaml-1/tree/flambda_jit&quot;&gt;the sources are available.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;footnote1&quot;&gt;[1]&lt;/span&gt; Not that it exists in real-world.&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=995</id><title type="text">OCaml JTRT</title><updated>2018-04-01T21:42:22-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-07-23T06:49:17-00:00</updated><link title="Frama-C RSS News" type="text/html" href="http://frama-c.com/" rel="related"/><link title="Frama-C RSS News" type="application/rss+xml" href="http://frama-c.com/rss.xml" rel="self"/><id>http://frama-c.com/</id><title type="text">Frama-C RSS News</title><author><name>Frama-C</name></author></source><link href="http://frama-c.com/index.html" rel="alternate"/><id>http://frama-c.com/index.html#5fd53db08641f23129181c67ab3cb78b</id><title type="text">Announcing the Sound Static Analysis for Security Workshop
  (2018-06-27 and 28 at NIST). See the whole programhere.</title><updated>2018-03-22T14:55:30-00:00</updated><author><name>Frama-C</name></author></entry><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/144.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">
The &lt;a href=&quot;https://github.com/coq/coq/releases/tag/V8.8+beta1&quot;&gt;first beta
release of Coq 8.8&lt;/a&gt; is available for testing. It features better
performances, tactic improvements, many enhancements for universe users, a new
Export modifier for setting options, support for goal selectors in front of
focusing brackets and a new experimental -mangle-names option for linting proof
scripts.

Feedback and &lt;a href=&quot;https://github.com/coq/coq/issues&quot;&gt;bug reports&lt;/a&gt; are extremely welcome.&lt;/p&gt;


 </content><id>https://coq.inria.fr/news/144.html</id><title type="text">Coq 8.8+beta1 is out</title><updated>2018-03-19T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2018-09-19T08:03:33-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.8</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/03/14/release-of-alt-ergo-2-1-0/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/03/14/release-of-alt-ergo-2-1-0/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;A new release of Alt-Ergo (version 2.1.0) is available on Alt-Ergo&amp;#8217;s website: &lt;a href=&quot;https://alt-ergo.ocamlpro.com/#releases&quot;&gt;https://alt-ergo.ocamlpro.com/#releases&lt;/a&gt;. An OPAM package for it will be published soon.&lt;br /&gt;
In this release, we mainly improved the CDCL-based SAT solver to get performances similar to/better than the old Tableaux-like SAT. The CDCL solver is now the default Boolean reasoner. The full list of CHANGES is available &lt;a href=&quot;https://github.com/OCamlPro/alt-ergo/blob/2.1.0/sources/CHANGES&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
Despite our various tests, you may still encounter some issues with this new solver.  Please, don&amp;#8217;t hesitate to report bugs, ask questions, and give your feedback!&lt;/p&gt;
</content><category term="Alt-Ergo"/><id>http://www.ocamlpro.com/?p=990</id><title type="text">Release of Alt-Ergo 2.1.0</title><updated>2018-03-14T17:02:44-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-09-19T08:03:33-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.8</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/03/14/new-updates-on-tzscan/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/03/14/new-updates-on-tzscan/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;blockquote&gt;&lt;p&gt;Update &amp;#8211; &lt;a class=&quot;url-ext&quot; href=&quot;http://tzscan.io/&quot; target=&quot;_blank&quot; rel=&quot;url noopener noreferrer&quot; data-full-url=&quot;http://TZScan.io&quot;&gt;TZScan.io&lt;/a&gt; can now work on top of the zeronet (&lt;a class=&quot;url-ext&quot; href=&quot;http://zeronet.tzscan.io/&quot; target=&quot;_blank&quot; rel=&quot;url noopener noreferrer&quot; data-full-url=&quot;http://zeronet.tzscan.io/&quot;&gt;zeronet.tzscan.io&lt;/a&gt;), we hope it can help the developers community monitor the network. You can now switch between the alphanet &amp;amp; zeronet networks!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;OCamlPro is pleased to announce an update of TzScan (http://tzscan.io), its Tezos block explorer to ease the use of the Tezos network.&lt;/p&gt;
&lt;p&gt;In addition to some minor bugfixes, the main novelties are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tzscan.io/health&quot;&gt;Health&lt;/a&gt; of the network with stats about the blocks, endorsements, bakers, etc.&lt;/li&gt;
&lt;li&gt;Display of future&lt;a href=&quot;http://tzscan.io/baking-rights&quot;&gt; baker&amp;#8217;s rights&lt;/a&gt; in the current cycle&lt;/li&gt;
&lt;li&gt;For each account, a more &lt;a href=&quot;http://tzscan.io/tz1UsgSSdRwwhYrqq7iVp2jMbYvNsGbWTozp&quot;&gt;detailed balance&lt;/a&gt; including the bonds, rewards, fees, etc. for the current cycle and its future baking positions&lt;/li&gt;
&lt;li&gt;A new feature to &lt;a href=&quot;http://tzscan.io/inject-signed-operation&quot;&gt;inject signed&lt;/a&gt; operations in the network&lt;/li&gt;
&lt;li&gt;In the detailed block&amp;#8217;s view, all blocks are displayed at the same level in alternative chains&lt;/li&gt;
&lt;li&gt;UI improvements on desktop, tablet and mobile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are still working hard trying to improve and add new features to TzScan. Further enhancements and optimizations are to come. Enjoy and play with our explorer.&lt;/p&gt;
&lt;p&gt;If you have suggestions or bugs, please send us reports at contact@tzscan.io&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=984</id><title type="text">New updates on TzScan</title><updated>2018-03-14T16:32:12-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-07-23T06:49:17-00:00</updated><link title="Frama-C RSS News" type="text/html" href="http://frama-c.com/" rel="related"/><link title="Frama-C RSS News" type="application/rss+xml" href="http://frama-c.com/rss.xml" rel="self"/><id>http://frama-c.com/</id><title type="text">Frama-C RSS News</title><author><name>Frama-C</name></author></source><link href="http://frama-c.com/index.html" rel="alternate"/><id>http://frama-c.com/index.html#05014252447dcd8dcf02368f8248b794</id><title type="text">frama-clang 0.0.5, fixing compatibility issue with
   Debian/Ubuntu, is out. Download ithere.</title><updated>2018-02-19T11:49:04-00:00</updated><author><name>Frama-C</name></author></entry><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/143.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">

&lt;p&gt;&lt;a href=&quot;/coq-87&quot;&gt;Version 8.7.2 of Coq&lt;/a&gt; is available. It fixes a critical bug in the VM handling of universes. This bug affected all releases since 8.5.&lt;/p&gt;

&lt;p&gt;Other changes include improved support for building with OCaml 4.06.0 and external num package, many other bug fixes, documentation improvements, and user message improvements (for details, see the &lt;a href=&quot;https://github.com/coq/coq/milestone/11?closed=1&quot;&gt;8.7.2 milestone&lt;/a&gt;).&lt;/p&gt;


 </content><id>https://coq.inria.fr/news/143.html</id><title type="text">Coq 8.7.2 is out</title><updated>2018-02-17T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2018-07-10T00:00:00-00:00</updated><logo>http://caml.inria.fr//pub/logos/caml-inria-fr.128x58.gif</logo><link title="The Caml Language" type="text/html" href="http://caml.inria.fr/" rel="related"/><link title="The Caml Language" type="application/rss+xml" href="http://caml.inria.fr/news.en.rss" rel="self"/><id>http://caml.inria.fr/</id><title type="text">The Caml Language</title><author><name>Caml INRIA</name></author></source><link href="http://caml.inria.fr/pub/distrib/ocaml-4.06/" rel="alternate"/><id>http://caml.inria.fr/pub/distrib/ocaml-4.06/#003db5a21767ab84ae617a6903409081</id><title type="text">OCaml 4.06.1 released</title><updated>2018-02-16T00:00:00-00:00</updated><author><name>Caml INRIA</name></author></entry><entry><source><updated>2018-09-19T08:03:33-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.8</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/02/14/release-of-a-first-version-of-tzscan-io-a-tezos-block-explorer/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/02/14/release-of-a-first-version-of-tzscan-io-a-tezos-block-explorer/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;&lt;img class=&quot;size-medium wp-image-942 aligncenter&quot; src=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/02/logo-300x112.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;112&quot; srcset=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/02/logo-300x112.png 300w, http://www.ocamlpro.com/wp-content/uploads/2018/02/logo.png 532w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot; /&gt;OCamlPro is proud to release a first version of &lt;a href=&quot;http://tzscan.io&quot;&gt;TzScan &lt;/a&gt;(http://tzscan.io), its Tezos&lt;br /&gt;
block explorer to ease the use of the Tezos network.&lt;/p&gt;
&lt;p&gt;What TzScan can do for you :&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&amp;#8211; Several charts on blocks, operations, network, volumes, fees, and more,&lt;br /&gt;
&amp;#8211; Marketcap and Futures/IOU prices from coinmarket.com,&lt;br /&gt;
&amp;#8211; Blocks, operations, accounts and contracts detail pages,&lt;br /&gt;
&amp;#8211; Public API to get information about blocks, operations, accounts and more,&lt;br /&gt;
&amp;#8211; Documentation on different concepts of Tezos like Endorsements, Nonces, etc.&lt;/p&gt;
&lt;p&gt;What we tried to do with TzScan is to show differently the Tezos network to have a better understanding of what is really going on by showing the main points of Proof of Stake. Further enhancements and optimization are to come but enjoy and play with our explorer.&lt;/p&gt;
&lt;p&gt;If you have suggestions or bugs, please send us reports at contact@tzscan.io !&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=940</id><title type="text">Release of a first version of TzScan.io, a Tezos block explorer</title><updated>2018-02-14T17:14:28-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-04-20T16:00:00-00:00</updated><subtitle type="text">on building functional operating systems</subtitle><rights type="text">All rights reserved by the author</rights><link type="text/html" href="https://mirage.io/blog/" rel="alternate"/><link href="https://mirage.io/blog/atom.xml" rel="self"/><contributor><uri>https://linse.me</uri><name>Stefanie Schirmer</name></contributor><contributor><email>anil@recoil.org</email><uri>http://anil.recoil.org</uri><name>Anil Madhavapeddy</name></contributor><contributor><email>hm519@cam.ac.uk</email><uri>https://github.com/hannesm</uri><name>Hannes Mehnert</name></contributor><contributor><email>thomas@gazagnaire.org</email><uri>http://gazagnaire.org</uri><name>Thomas Gazagnaire</name></contributor><contributor><email>mindy.preston@cl.cam.ac.uk</email><uri>https://github.com/yomimono</uri><name>Mindy Preston</name></contributor><contributor><email>gg417@cl.cam.ac.uk</email><uri>https://github.com/GemmaG</uri><name>Gemma Gordon</name></contributor><contributor><email>drupyog@zoho.com</email><uri>https://github.com/drup</uri><name>Gabriel Radanne</name></contributor><contributor><email>djwillia@us.ibm.com</email><uri>https://github.com/djwillia</uri><name>Dan Williams</name></contributor><contributor><email>haesbaert@haesbaert.org</email><uri>http://www.haesbaert.org/</uri><name>Christiano Haesbaert</name></contributor><contributor><email>amirmc@gmail.com</email><uri>http://amirchaudhry.com</uri><name>Amir Chaudhry</name></contributor><contributor><email>david.mersinjak@cl.cam.ac.uk</email><uri>https://github.com/pqwy</uri><name>David Kaloper</name></contributor><contributor><email>talex5@gmail.com</email><uri>http://roscidus.com/blog/</uri><name>Thomas Leonard</name></contributor><contributor><email>dave@recoil.org</email><uri>http://dave.recoil.org/</uri><name>Dave Scott</name></contributor><contributor><email>jon@recoil.org</email><uri>http://jon.recoil.org</uri><name>Jon Ludlam</name></contributor><contributor><email>jeremy.yallop@cl.cam.ac.uk</email><uri>https://github.com/yallop</uri><name>Jeremy Yallop</name></contributor><contributor><email>mort@cantab.net</email><uri>http://mort.io/</uri><name>Richard Mortier</name></contributor><contributor><email>vb@luminar.eu.org</email><uri>https://github.com/vbmithr</uri><name>Vincent Bernardoff</name></contributor><contributor><email>raphlalou@gmail.com</email><uri>https://github.com/raphael-proust</uri><name>Raphael Proust</name></contributor><id>https://mirage.io/blog/</id><title type="text">The MirageOS Blog</title><author><name>MirageOS</name></author></source><link type="text/html" href="https://mirage.io/blog/2018-esp32-booting" rel="alternate"/><content xml:base="https://mirage.io/blog/atom.xml" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Now that the winter holiday break is over, we are starting to see the results of winter hacking among our community.</p>
<p>The first great hack for 2018 is from <a href="http://toao.com">Sadiq Jaffer</a>, who got OCaml booting on a tiny and relatively new CPU architecture -- the <a href="http://esp32.net">Espressif ESP32</a>.  After proudly demonstrating a battery powered version to the folks at <a href="https://ocamllabs.io">OCaml Labs</a>, he then proceeded to clean it up enough tha it can be built with a <a href="https://github.com/sadiqj/ocaml-esp32-docker">Dockerfile</a>, so that others can start to do a native code port and get bindings to the networking interface working.</p>
<p><a href="http://toao.com/blog/getting-ocaml-running-on-the-esp32#getting-ocaml-running-on-the-esp32">Read all about it on Sadiq's blog</a>, and thanks for sharing this with us, Sadiq!</p>
<p>We also noticed that another OCaml generic virtual machine for even smaller microcontrollers has <a href="https://github.com/stevenvar/omicrob">shown up on GitHub</a>.  This, combined with some functional metaprogramming, may mean that 2018 is the year of OCaml in all the tiny embedded things...</p>
</div></content><id>https://mirage.io/blog/2018-esp32-booting</id><title type="text">MirageOS running on the ESP32 embedded chip</title><updated>2018-01-26T16:00:00-00:00</updated><author><email>anil@recoil.org</email><uri>http://anil.recoil.org</uri><name>Anil Madhavapeddy</name></author></entry><entry><summary type="text">&lt;p&gt;New year brings new possibilities and a new environment.  I&amp;#39;ve been working on the most Widely deployed key-value store, the domain name system.  Primary and secondary name services are available, including dynamic updates, notify, and tsig authentication.&lt;/p&gt;
</summary><source><updated>2018-04-29T11:40:10-00:00</updated><link href="https://hannes.nqsb.io/atom" rel="self"/><id>urn:uuid:981361ca-e71d-4997-a52c-baeee78e4156</id><title type="text">full stack engineer</title><author><name>Hannes Mehnert</name></author></source><published>2018-01-11T14:02:01-00:00</published><link href="https://hannes.nqsb.io/Posts/DNS" rel="alternate"/><content xml:base="https://hannes.nqsb.io/atom" type="html">

&lt;h2 id=&quot;2018&quot;&gt;2018&lt;/h2&gt;

&lt;p&gt;At the end of 2017, I resigned from my PostDoc position at University of
Cambridge (in the &lt;a href='https://www.cl.cam.ac.uk/~pes20/rems/'&gt;rems&lt;/a&gt; project).  Early
December 2017 I organised the &lt;a href='https://mirage.io/blog/2017-winter-hackathon-roundup'&gt;4th MirageOS hack
retreat&lt;/a&gt;, with which I&amp;#39;m
very satisfied.  In March 2018 the &lt;a href='http://retreat.mirage.io'&gt;5th retreat&lt;/a&gt; will
happen (please sign up!).&lt;/p&gt;
&lt;p&gt;In 2018 I moved to Berlin and started to work for the (non-profit) &lt;a href='https://techcultivation.org'&gt;Center for
the cultivation of technology&lt;/a&gt; with our
&lt;a href='http://robur.io'&gt;robur.io&lt;/a&gt; project &amp;quot;At robur, we build performant bespoke
minimal operating systems for high-assurance services&amp;quot;.  robur is only possible
by generous donations in autumn 2017, enthusiastic collaborateurs, supportive
friends, and a motivated community, thanks to all.  We will receive funding from
the &lt;a href='https://prototypefund.de/project/robur-io/'&gt;prototypefund&lt;/a&gt; to work on a
&lt;a href='http://robur.io/Projects/CalDAV'&gt;CalDAV server&lt;/a&gt; implementation in OCaml
targeting MirageOS.  We&amp;#39;re still looking for donations and further funding,
please get in touch.  Apart from CalDAV, I want to start the year by finishing
several projects which I discovered on my hard drive.  This includes DNS, &lt;a href='/Posts/Conex'&gt;opam
signing&lt;/a&gt;, TCP, ... .  My personal goal for 2018 is to develop a
flexible &lt;code&gt;mirage deploy&lt;/code&gt;, because after configuring and building a unikernel, I
want to get it smoothly up and running (spoiler: I already use
&lt;a href='/Posts/VMM'&gt;albatross&lt;/a&gt; in production).&lt;/p&gt;
&lt;p&gt;To kick off (3% of 2018 is already used) this year, I&amp;#39;ll talk in more detail
about &lt;a href='https://github.com/roburio/udns'&gt;µDNS&lt;/a&gt;, an opinionated from-scratch
re-engineered DNS library, which I&amp;#39;ve been using since Christmas 2017 in production for
&lt;a href='https://github.com/hannesm/ns.nqsb.io'&gt;ns.nqsb.io&lt;/a&gt; and
&lt;a href='https://git.robur.io/?p=ns.robur.io.git;a=summary'&gt;ns.robur.io&lt;/a&gt;.  The
development started in March 2017, and continued over several evenings and long
weekends.  My initial motivation was to implement a recursive resolver to run on
my laptop.  I had a working prototype in use on my laptop over 4 months in the
summer 2017, but that code was not in a good shape, so I went down the rabbit
hole and (re)wrote a server (and learned more about GADT).  A configurable
resolver needs a server, as local overlay, usually anyways.  Furthermore,
dynamic updates are standardised and thus a configuration interface exists
inside the protocol, even with hmac-signatures for authentication!
Coincidentally, I started to solve another issue, namely automated management of let&amp;#39;s
encrypt certificates (see &lt;a href='https://github.com/hannesm/ocaml-letsencrypt/tree/nsupdate'&gt;this
branch&lt;/a&gt; for an
initial hack).  On my journey, I also reported a cache poisoning vulnerability,
which was fixed in &lt;a href='https://docs.docker.com/docker-for-windows/release-notes/#docker-community-edition-17090-ce-win32-2017-10-02-stable'&gt;Docker for
Windows&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But let&amp;#39;s get started with some content.  Please keep in mind that while the
code is publicly available, it is not yet released (mainly since the test
coverage is not high enough, and the lack of documentation).  I appreciate early
adopters, please let me know if you find any issues or find a use case which is
not straightforward to solve.  This won&amp;#39;t be the last article about DNS this
year - persistent storage, resolver, let&amp;#39;s encrypt support are still missing.&lt;/p&gt;
&lt;h2 id=&quot;What-is-DNS&quot;&gt;What is DNS?&lt;/h2&gt;

&lt;p&gt;The &lt;a href='https://en.wikipedia.org/wiki/DNS'&gt;domain name system&lt;/a&gt; is a core Internet
protocol, which translates domain names to IP addresses.  A domain name is
easier to memorise for human beings than an IP address.  DNS is hierarchical and
decentralised.  It was initially &amp;quot;specified&amp;quot; in Nov 1987 in &lt;a href='https://tools.ietf.org/html/rfc1034'&gt;RFC
1034&lt;/a&gt; and &lt;a href='https://tools.ietf.org/html/rfc1035'&gt;RFC
1035&lt;/a&gt;.  Nowadays it spans over more than 20
technical RFCs, 10 security related, 5 best current practises and another 10
informational.  The basic encoding and mechanisms did not change.&lt;/p&gt;
&lt;p&gt;On the Internet, there is a set of root servers (administrated by IANA) which
provide the information about which name servers are authoritative for which top level
domain (such as &amp;quot;.com&amp;quot;).  They provide the information about which name servers are
responsible for which second level domain name (such as &amp;quot;example.com&amp;quot;), and so
on.  There are at least two name servers for each domain name in separate
networks - in case one is unavailable the other can be reached.&lt;/p&gt;
&lt;p&gt;The building blocks for DNS are: the resolver, a stub (&lt;code&gt;gethostbyname&lt;/code&gt; provided
by your C library) or caching forwarding resolver (at your ISP), which send DNS
packets to another resolver, or a recursive resolver which, once seeded with the
root servers, finds out the IP address of a requested domain name.  The other
part are authoritative servers, which reply to requests for their configured
domain.&lt;/p&gt;
&lt;p&gt;To get some terminology, a DNS client sends a query, consisting of a domain
name and a query type, and expects a set of answers, which are called resource
records, and contain: name, time to live, type, and data.  The resolver
iteratively requests resource records from authoritative servers, until the requested
domain name is resolved or fails (name does not exist, server
failure, server offline).&lt;/p&gt;
&lt;p&gt;DNS usually uses UDP as transport which is not reliable and limited to 512 byte
payload on the Internet (due to various middleboxes).  DNS can also be
transported via TCP, and even via TLS over UDP or TCP.  If a DNS packet
transferred via UDP is larger than 512 bytes, it is cut at the 512 byte mark,
and a bit in its header is set.  The receiver can decide whether to use the 512
bytes of information, or to throw it away and attempt a TCP connection.&lt;/p&gt;
&lt;h3 id=&quot;DNS-packet&quot;&gt;DNS packet&lt;/h3&gt;

&lt;p&gt;The packet encoding starts with a 16bit identifier followed by a 16bit header
(containing operation, flags, status code), and four counters, each 16bit,
specifying the amount of resource records in the body: questions, answers,
authority records, and additional records.  The header starts with one bit
operation (query or response), four bits opcode, various flags (recursion,
authoritative, truncation, ...), and the last four bit encode the response code.&lt;/p&gt;
&lt;p&gt;A question consists of a domain name, a query type, and a query class.  A
resource record additionally contains a 32bit time to live, a length, and the
data.&lt;/p&gt;
&lt;p&gt;Each domain name is a case sensitive string of up to 255 bytes, separated by &lt;code&gt;.&lt;/code&gt;
into labels of up to 63 bytes each.  A label is either encoded by its length
followed by the content, or by an offset to the start of a label in the current
DNS frame (poor mans compression).  Care must be taken during decoding to avoid
cycles in offsets.  Common operations on domain names are comparison: equality,
ordering, and also whether some domain name is a subdomain of another domain
name, should be efficient.  My initial representation naïvely was a list of
strings, now it is an array of strings in reverse order.  This speeds up common
operations by a factor of 5 (see test/bench.ml).&lt;/p&gt;
&lt;p&gt;The only really used class is &lt;code&gt;IN&lt;/code&gt; (for Internet), as mentioned in &lt;a href='https://tools.ietf.org/html/rfc6895'&gt;RFC
6895&lt;/a&gt;.  Various query types (&lt;code&gt;MD&lt;/code&gt;, &lt;code&gt;MF&lt;/code&gt;,
&lt;code&gt;MB&lt;/code&gt;, &lt;code&gt;MG&lt;/code&gt;, &lt;code&gt;MR&lt;/code&gt;, &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;AFSDB&lt;/code&gt;, ...) are barely or never used.  There is no
need to convolute the implementation and its API with these legacy options (if
you have a use case and see those in the wild, please tell me).&lt;/p&gt;
&lt;p&gt;My implemented packet decoding does decompression, only allows valid internet
domain names, and may return a partial parse - to use as many resource records
in truncated packets as possible.  There are no exceptions raised, the parsing
uses a monadic style error handling.  Since label decompression requires the
parser to know absolute offsets, the original buffer and the offset is manually
passed around at all times, instead of using smaller views on the buffer.  The
decoder does not allow for gaps, when the outer resource data length specifies a
byte length which is not completely consumed by the specific resource data
subparser (an A record must always consume four bytes).  Failing to check this can
lead to a way to exfiltrate data without getting noticed.&lt;/p&gt;
&lt;p&gt;Each zone (a served domain name) contains a SOA &amp;quot;start of authority&amp;quot; entry,
which includes the primary nameserver name, the hostmaster&amp;#39;s email address (both
encoded as domain name), a serial number of the zone, a refresh, retry, expiry,
and minimum interval (all encoded as 32bit unsigned number in seconds).  Common
resource records include A, which payload is 32bit IPv4 address.  A nameserver
(NS) record carries a domain name as payload.  A mail exchange (MX) whose
payload is a 16bit priority and a domain name.  A CNAME record is an alias to
another domain name.  These days, there are even records to specify the
certificate authority authorisation (CAA) records containing a flag (critical),
a tag (&amp;quot;issue&amp;quot;) and a value (&amp;quot;letsencrypt.org&amp;quot;).&lt;/p&gt;
&lt;h2 id=&quot;Server&quot;&gt;Server&lt;/h2&gt;

&lt;p&gt;The operation of a DNS server is to listen for a request and serve a reply.
Data to be served can be canonically encoded (the RFC describes the format) in a
zone file.  Apart from insecurity in DNS server implementations, another attack
vector are amplification attacks where an attacker crafts a small UDP frame
with a fake source IP address, and the server answers with a large response to
that address which may lead to a DoS attack.  Various mitigations exist
including rate limiting, serving large replies only via TCP, ...&lt;/p&gt;
&lt;p&gt;Internally, the zone file data is stored in a tree (module
&lt;a href='https://github.com/roburio/udns/blob/master/server/dns_trie.mli'&gt;Dns_trie&lt;/a&gt;
&lt;a href='https://github.com/roburio/udns/blob/master/server/dns_trie.ml'&gt;implementation&lt;/a&gt;),
where each node contains two maps: &lt;code&gt;sub&lt;/code&gt;, which key is a label and value is a
subtree and &lt;code&gt;dns_map&lt;/code&gt; (module Dns_map), which key is a resource record type and
value is the resource record.  Both use the OCaml
&lt;a href='http://caml.inria.fr/pub/docs/manual-ocaml/libref/Map.html'&gt;Map&lt;/a&gt; (&amp;quot;also known
as finite maps or dictionaries, given a total ordering function over the
keys. All operations over maps are purely applicative (no side-effects). The
implementation uses balanced binary trees, and therefore searching and insertion
take time logarithmic in the size of the map&amp;quot;).&lt;/p&gt;
&lt;p&gt;The server looks up the queried name, and in the returned Dns_map the queried
type. The found resource records are sent as answer, which also includes the
question and authority information (NS records of the zone) and additional glue
records (IP addresses of names mentioned earlier in the same zone).&lt;/p&gt;
&lt;h3 id=&quot;Dns-map&quot;&gt;Dns_map&lt;/h3&gt;

&lt;p&gt;The data structure which contains resource record types as key, and a collection
of matching resource records as values.  In OCaml the value type must be
homogenous - using a normal sum type leads to an unneccessary unpacking step
(or lacking type information):&lt;/p&gt;
&lt;pre class='OCaml'&gt;&lt;code class='OCaml'&gt;let lookup_ns t =
  match Map.find NS t with
  | None -&amp;gt; Error `NotFound
  | Some (NS nameservers) -&amp;gt; Ok nameservers
  | Some _ -&amp;gt; Error `NotFound&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead, I use in my current rewrite &lt;a href='https://en.wikipedia.org/wiki/Generalized_algebraic_data_type'&gt;generalized algebraic data
types&lt;/a&gt; (read
&lt;a href='http://caml.inria.fr/pub/docs/manual-ocaml/extn.html#sec251'&gt;OCaml manual&lt;/a&gt; and
&lt;a href='http://mads-hartmann.com/ocaml/2015/01/05/gadt-ocaml.html'&gt;Mads Hartmann blog post about use cases for
GADTs&lt;/a&gt;, &lt;a href='https://andreas.github.io/2018/01/05/modeling-graphql-type-modifiers-with-gadts/'&gt;Andreas
Garnæs about using GADTs for GraphQL type
modifiers&lt;/a&gt;)
to preserve a relation between key and value (and A record has a list of IPv4
addresses and a ttl as value) - similar to
&lt;a href='http://erratique.ch/software/hmap'&gt;hmap&lt;/a&gt;, but different: a closed key-value
mapping (the GADT), no int for each key and mutable state.  Thanks to Justus
Matthiesen for helping me with GADTs and this code.  Look into the
&lt;a href='https://github.com/roburio/udns/blob/master/src/dns_map.mli'&gt;interface&lt;/a&gt; and
&lt;a href='https://github.com/roburio/udns/blob/master/src/dns_map.ml'&gt;implementation&lt;/a&gt;.&lt;/p&gt;
&lt;pre class='OCaml'&gt;&lt;code class='OCaml'&gt;(* an ordering relation, I dislike using int for that *)
module Order = struct
  type (_,_) t =
    | Lt : (&amp;#39;a, &amp;#39;b) t
    | Eq : (&amp;#39;a, &amp;#39;a) t
    | Gt : (&amp;#39;a, &amp;#39;b) t
end

module Key = struct
  (* The key and its value type *)
  type _ t =
    | Soa : (int32 * Dns_packet.soa) t
    | A : (int32 * Ipaddr.V4.t list) t
    | Ns : (int32 * Dns_name.DomSet.t) t
    | Cname : (int32 * Dns_name.t) t

  (* we need a total order on our keys *)
  let compare : type a b. a t -&amp;gt; b t -&amp;gt; (a, b) Order.t = fun t t&amp;#39; -&amp;gt;
    let open Order in
    match t, t&amp;#39; with
    | Cname, Cname -&amp;gt; Eq | Cname, _ -&amp;gt; Lt | _, Cname -&amp;gt; Gt
    | Ns, Ns -&amp;gt; Eq | Ns, _ -&amp;gt; Lt | _, Ns -&amp;gt; Gt
    | Soa, Soa -&amp;gt; Eq | Soa, _ -&amp;gt; Lt | _, Soa -&amp;gt; Gt
    | A, A -&amp;gt; Eq
end

type &amp;#39;a key = &amp;#39;a Key.t

(* our OCaml Map with an encapsulated constructor as key *)
type k = K : &amp;#39;a key -&amp;gt; k
module M = Map.Make(struct
    type t = k
    (* the price I pay for not using int as three-state value *)
    let compare (K a) (K b) = match Key.compare a b with
      | Order.Lt -&amp;gt; -1
      | Order.Eq -&amp;gt; 0
      | Order.Gt -&amp;gt; 1
  end)

(* v contains a key and value pair, wrapped by a single constructor *)
type v = V : &amp;#39;a key * &amp;#39;a -&amp;gt; v

(* t is the main type of a Dns_map, used by clients *)
type t = v M.t

(* retrieve a typed value out of the store *)
let get : type a. a Key.t -&amp;gt; t -&amp;gt; a = fun k t -&amp;gt;
  match M.find (K k) t with
  | V (k&amp;#39;, v) -&amp;gt;
    (* this comparison is superfluous, just for the types *)
    match Key.compare k k&amp;#39; with
    | Order.Eq -&amp;gt; v
    | _ -&amp;gt; assert false&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This helps me to programmaticaly retrieve tightly typed values from the cache,
important when code depends on concrete values (i.e. when there are domain
names, look these up as well and add as additional records).  Look into &lt;a href='https://github.com/roburio/udns/blob/master/server/dns_server.ml'&gt;server/dns_server.ml&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Dynamic-updates-notifications-and-authentication&quot;&gt;Dynamic updates, notifications, and authentication&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://tools.ietf.org/html/rfc2136'&gt;Dynamic updates&lt;/a&gt; specify in-protocol
record updates (supported for example by &lt;code&gt;nsupdate&lt;/code&gt; from ISC bind-tools),
&lt;a href='https://tools.ietf.org/html/rfc1996'&gt;notifications&lt;/a&gt; are used by primary servers
to notify secondary servers about updates, which then initiate a &lt;a href='https://tools.ietf.org/html/rfc5936'&gt;zone
transfer&lt;/a&gt; to retrieve up to date
data. &lt;a href='https://tools.ietf.org/html/rfc2845'&gt;Shared hmac secrets&lt;/a&gt; are used to
ensure that the transaction (update, zone transfer) was authorised.  These are
all protocol extensions, there is no need to use out-of-protocol solutions.&lt;/p&gt;
&lt;p&gt;The server logic for update and zone transfer frames is slightly more complex,
and includes a dependency upon an authenticator (implemented using the
&lt;a href='https://github.com/mirleft/ocaml-nocrypto'&gt;nocrypto&lt;/a&gt; library, and
&lt;a href='http://erratique.ch/software/ptime'&gt;ptime&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&quot;Deployment-and-Let-39-s-Encrypt&quot;&gt;Deployment and Let&amp;#39;s Encrypt&lt;/h3&gt;

&lt;p&gt;To deploy servers without much persistent data, an authentication schema is
hardcoded in the dns-server: shared secrets are also stored as DNS entries
(DNSKEY), and &lt;code&gt;_transfer.zone&lt;/code&gt;, &lt;code&gt;_update.zone&lt;/code&gt;, and &lt;code&gt;_key-management.zone&lt;/code&gt; names
are introduced to encode the permissions.  A &lt;code&gt;_transfer&lt;/code&gt; key also needs to
encode the IP address of the primary (to know where to request zone transfers)
and secondary IP (to know where to send notifications).&lt;/p&gt;
&lt;p&gt;Please have a look at
&lt;a href='https://git.robur.io/?p=ns.robur.io.git;a=summary'&gt;ns.robur.io&lt;/a&gt; and the &lt;a href='https://github.com/roburio/udns/blob/master/mirage/examples'&gt;examples&lt;/a&gt; for more details.  The shared secrets are provided as boot parameter of the unikernel.&lt;/p&gt;
&lt;p&gt;I hacked maker&amp;#39;s
&lt;a href='https://github.com/hannesm/ocaml-letsencrypt/tree/nsupdate'&gt;ocaml-letsencrypt&lt;/a&gt;
library to use µDNS and sending update frames to the given IP address.  I
already used this to have letsencrypt issue various certificates for my domains.&lt;/p&gt;
&lt;p&gt;There is no persistent storage of updates yet, but this can be realised by
implementing a secondary (which is notified on update) that writes every new
zone to persistent storage (e.g. &lt;a href='https://github.com/mirage/mirage-block'&gt;disk&lt;/a&gt;
or &lt;a href='https://github.com/mirage/ocaml-git'&gt;git&lt;/a&gt;).  I also plan to have an
automated Let&amp;#39;s Encrypt certificate unikernel which listens for certificate
signing requests and stores signed certificates in DNS.  Luckily the year only
started and there&amp;#39;s plenty of time left.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m interested in feedback, either via &lt;strike&gt;&lt;a href='https://twitter.com/h4nnes'&gt;twitter&lt;/a&gt;&lt;/strike&gt;
hannesm@mastodon.social or an issue on the &lt;a href='https://github.com/hannesm/hannes.nqsb.io/issues'&gt;data
repository&lt;/a&gt;.&lt;/p&gt;
</content><category scheme="https://hannes.nqsb.io/tags/mirageos" term="mirageos"/><category scheme="https://hannes.nqsb.io/tags/protocol" term="protocol"/><id>urn:uuid:ccc6628c-7eed-5600-b504-4de6644d013d</id><title type="text">My 2018 contains robur and starts with re-engineering DNS</title><updated>2018-04-18T11:38:06-00:00</updated><author><name>hannes</name></author></entry><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/142.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">
&lt;p&gt;The macOS installer for Coq 8.7.1 was updated on 2018-01-08 to fix frequent crashes of CoqIDE due to the use of an outdated dependency. Direct link to the new version:
&lt;a href=&quot;https://github.com/coq/coq/releases/download/V8.7.1/coq-8.7.1-1-installer-macos.dmg&quot;&gt;
coq-8.7.1-1-installer-macos.dmg&lt;/a&gt;.

 </content><id>https://coq.inria.fr/news/142.html</id><title type="text">MacOS package updated</title><updated>2018-01-09T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2018-04-20T16:00:00-00:00</updated><subtitle type="text">on building functional operating systems</subtitle><rights type="text">All rights reserved by the author</rights><link type="text/html" href="https://mirage.io/blog/" rel="alternate"/><link href="https://mirage.io/blog/atom.xml" rel="self"/><contributor><uri>https://linse.me</uri><name>Stefanie Schirmer</name></contributor><contributor><email>anil@recoil.org</email><uri>http://anil.recoil.org</uri><name>Anil Madhavapeddy</name></contributor><contributor><email>hm519@cam.ac.uk</email><uri>https://github.com/hannesm</uri><name>Hannes Mehnert</name></contributor><contributor><email>thomas@gazagnaire.org</email><uri>http://gazagnaire.org</uri><name>Thomas Gazagnaire</name></contributor><contributor><email>mindy.preston@cl.cam.ac.uk</email><uri>https://github.com/yomimono</uri><name>Mindy Preston</name></contributor><contributor><email>gg417@cl.cam.ac.uk</email><uri>https://github.com/GemmaG</uri><name>Gemma Gordon</name></contributor><contributor><email>drupyog@zoho.com</email><uri>https://github.com/drup</uri><name>Gabriel Radanne</name></contributor><contributor><email>djwillia@us.ibm.com</email><uri>https://github.com/djwillia</uri><name>Dan Williams</name></contributor><contributor><email>haesbaert@haesbaert.org</email><uri>http://www.haesbaert.org/</uri><name>Christiano Haesbaert</name></contributor><contributor><email>amirmc@gmail.com</email><uri>http://amirchaudhry.com</uri><name>Amir Chaudhry</name></contributor><contributor><email>david.mersinjak@cl.cam.ac.uk</email><uri>https://github.com/pqwy</uri><name>David Kaloper</name></contributor><contributor><email>talex5@gmail.com</email><uri>http://roscidus.com/blog/</uri><name>Thomas Leonard</name></contributor><contributor><email>dave@recoil.org</email><uri>http://dave.recoil.org/</uri><name>Dave Scott</name></contributor><contributor><email>jon@recoil.org</email><uri>http://jon.recoil.org</uri><name>Jon Ludlam</name></contributor><contributor><email>jeremy.yallop@cl.cam.ac.uk</email><uri>https://github.com/yallop</uri><name>Jeremy Yallop</name></contributor><contributor><email>mort@cantab.net</email><uri>http://mort.io/</uri><name>Richard Mortier</name></contributor><contributor><email>vb@luminar.eu.org</email><uri>https://github.com/vbmithr</uri><name>Vincent Bernardoff</name></contributor><contributor><email>raphlalou@gmail.com</email><uri>https://github.com/raphael-proust</uri><name>Raphael Proust</name></contributor><id>https://mirage.io/blog/</id><title type="text">The MirageOS Blog</title><author><name>MirageOS</name></author></source><link type="text/html" href="https://mirage.io/blog/2017-winter-hackathon-roundup" rel="alternate"/><content xml:base="https://mirage.io/blog/atom.xml" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1 id="MirageOS-Winter-Hack-Retreat-Marrakesh-2017">MirageOS Winter Hack Retreat, Marrakesh 2017</h1>

<p>This winter, 33 people from around the world gathered in Marrakesh for a Mirage hack retreat. This is fast becoming a <a href="/blog/2016-spring-hackathon">MirageOS</a> <a href="/blog/2017-march-hackathon-roundup">tradition</a>, and we're a little sad that it's over already! We've collected some trip reports from those who attended the 2017 winter hack retreat, and we'd like to thank our amazing hosts, organisers and everyone who took the time to write up their experiences.
<img style="float:right; padding: 15px" src="/graphics/winter2017.jpg"/></p>
<p>We, the MirageOS community, strongly believe in using our own software: this website has been a unikernel since day one^W^W it was possible to run MirageOS unikernels.  In Marrakesh we used our own DHCP and DNS server without trouble.  There are many more services under heavy development (including git, ssh, ...), which we're looking forward to using soon ourselves.</p>
<p>Several atteendees joined for the second or third time in Marrakesh, and brought their own projects, spanning over <a href="https://github.com/andreas/ocaml-graphql-server">graphql</a>, <a href="https://reproducible-builds.org/">reproducible builds</a> (with application to <a href="https://github.com/talex5/qubes-mirage-firewall">qubes-mirage-firewall</a>, see <a href="http://layer-acht.org/thinking/blog/20171204-qubes-mirage-firewall/">holger's report</a> and <a href="https://github.com/ocaml/ocaml/pull/1515">Gabriel's OCaml fixes for build path variation</a>).  A stream of improving error messages in the OCaml compiler (based on <a href="https://github.com/ocaml/ocaml/pull/102">Arthur Charguéraud PR</a>) was prepared and merged (<a href="https://github.com/ocaml/ocaml/pull/1496">PR 1496</a>, <a href="https://github.com/ocaml/ocaml/pull/1501">PR 1501</a>, <a href="https://github.com/ocaml/ocaml/pull/1505">PR 1505</a>, <a href="https://github.com/ocaml/ocaml/pull/1510">PR 1510</a>, and <a href="https://github.com/ocaml/ocaml/pull/1534">PR 1534</a>).  Our OCaml <a href="https://github.com/mirage/ocaml-git/">git implementation</a> was rewritten to support git push properly, and this PR was <a href="https://github.com/mirage/ocaml-git/pull/227">merged</a>.  Other projects of interest are <a href="https://github.com/haesbaert/awa-ssh">awa-ssh</a>, <a href="https://github.com/mirage/charrua-core/pull/76">anonymity profiles in DHCP</a>, and fixes to the deployment troubles of <a href="https://github.com/mirage/mirage-www">our website</a>.  There is now a <a href="https://github.com/cfcs/eye-of-mirage">mirage PNG viewer integrated into Qubes</a> and a <a href="https://github.com/cfcs/passmenage">password manager</a>.  Some <a href="https://github.com/juga0/mirage_mar2017">getting started notes</a> were written down as well as the new <a href="https://mirage.io/wiki/learning">learning about MirageOS</a> website.</p>
<p>A huge fraction of the <a href="https://github.com/solo5/solo5">Solo5 contributors</a> gathered in Marrakesh as well and discussed the future, including terminology, the project scope, and outlined a roadmap for merging branches in various states.  Adrian from the <a href="https://muen.sk">Muen</a> project joined the discussion, and in the aftermath they are now running their website using MirageOS on top of the Muen separation kernel.</p>
<p>A complete list of fixes and discussions is not available, please bear with us if we forgot anything above.  A sneak preview: there will be <a href="http://retreat.mirage.io">another retreat in March 2018</a> in Marrakesh.  Following are texts written by individual participants about their experience.</p>
<h2 id="Mindy-Preston">Mindy Preston</h2>

<p>I came to Marrakesh for the hack retreat with one goal in mind: documentation.  I was very pleased to discover that <a href="https://github.com/mk270">Martin Keegan</a> had come with the same goal in mind and fresher eyes, and so I had some time to relax, enjoy Priscilla and the sun, photograph some cats, and chat about projects both past and future.  In particular, I was really pleased that there's continued interest in building on some of the projects I've worked on at previous hack retreats.</p>
<p>On the way to the first hack retreat, I did some work applying <a href="https://github.com/stedolan">Stephen Dolan's</a> then-experimental <a href="http://lcamtuf.coredump.cx">American Fuzzy Lop</a> instrumentation to testing the <a href="https://github.com/mirage/mirage-tcpip">mirage-tcpip</a> library via <a href="https://github.com/yomimono/mirage-net-pcap">mirage-net-pcap</a>. (A post on this was <a href="http://canopy.mirage.io/Projects/Fuzzing">one of the first Canopy entries!</a>  At this hack retreat, I did a short presentation on the current state of this work:</p>
<ul><li>AFL instrumentation was released in OCaml 4.05; switches with it enabled by default are available in opam (<code>opam sw 4.05.0+afl</code>)</li><li><a href="https://github.com/stedolan/crowbar">crowbar</a> for writing generative tests powered by AFL, with an <a href="https://github.com/stedolan/crowbar/tree/staging">experimental staging branch</a> that shows OCaml code for regenerating failing test cases</li><li>a <a href="https://github.com/yomimono/ppx_deriving_crowbar">companion ppx_deriving</a> plugin for automatic generator discovery based on type definitions</li><li><a href="https://github.com/yomimono/ocaml-bun">bun</a>, for integrating afl tests into CI runs</li></ul>

<p>I was lucky to have a lot of discussions about fuzzing in OCaml, some of which inspired further work and suggestions on <a href="https://github.com/stedolan/crowbar/issues/7">some current problems in Crowbar</a>.  (Special thanks to <a href="https://github.com/gasche">gasche</a> and <a href="https://github.com/armael">armael</a> for their help there!)  I'm also grateful to <a href="https://github.com/aantron">aantron</a> for some discussions on ppx_bisect motivated by an attempt to estimate coverage for this testing workflow.  I was prodded into trying to get Crowbar ready to release by these conversations, and wrote a lot of docstrings and an actual README for the project.</p>
<p><a href="https://github.com/juga0">juga0</a> added some extensions to the <a href="https://github.com/mirage/charrua-core">charrua-core DHCP library</a> started by <a href="https://github.com/haesbaert">Christiano Haesbaert</a> a few hack retreats ago.  juga0 wanted to add some features to support <a href="https://tools.ietf.org/html/rfc7844.html">more anonymity for DHCP clients</a>, so we did some associated work on the <a href="https://github.com/haesbaert/rawlink">rawlink</a> library, and added an experimental Linux DHCP client for charrua-core itself.  I got to write a lot of docstrings for this library!</p>
<p>I was also very excited to see the work that <a href="https://github.com/cfcs">cfcs</a> has been doing on building more interesting MirageOS unikernels for use in QubesOS.  I had seen static screenshots of <a href="https://github.com/cfcs/mirage-framebuffer">mirage-framebuffer</a> in action which didn't do it justice at all; seeing it in person (including self-hosted slides!) was really cool, and inspired me to think about how to fix <a href="https://discuss.ocaml.org/t/mirageos-parametric-compilation-depending-on-target/1005/12">some ugliness in writing unikernels using the framebuffer</a>. The <a href="https://github.com/cfcs/passmenage">experimental password manager</a> is something I hope to be using by the next hack retreat.  Maybe 2017 really is <a href="https://mirage.io/blog/qubes-target">the year of unikernels on the desktop</a>!</p>
<p>tg, hannes, halfdan, samoht, and several others (sorry if I missed you!) worked hard to get some unikernel infrastructure up and running at Priscilla, including homegrown DHCP and DNS services, self-hosted pastebin and etherpad, an FTP server for blazing-fast local filesharing, and (maybe most importantly!) a local <code>opam</code> mirror.  I hope that in future hack retreats, we can set up a local <code>git</code> server using the <a href="https://github.com/mirage/ocaml-git">OCaml git implementation</a>, which got some major improvements during the hack retreat thanks to dinosaure (from the other side of the world!) and samoht.</p>
<p>Finally, the <a href="https://github.com/talex5/qubes-mirage-firewall">qubes-mirage-firewall</a> got a lot of attention this hack retreat.  (The firewall itself incorporates some past hack retreat work by me and talex5.)  h01ger worked on the <a href="http://layer-acht.org/thinking/blog/20171204-qubes-mirage-firewall/">reproducibility of the build</a>, and cfcs did some work on passing ruleset changes to the firewall -- currently, users of qubes-mirage-firewall need to rebuild the unikernel with ruleset changes.</p>
<p>We also uncovered some strangeness and bugs in the <a href="https://github.com/mirage/mirage/pull/874">handling of Xen block-storage devices</a>, which I was happy to fix in advance of the more intense use of block storage I expect with <a href="https://github.com/g2p/wodan">wodan</a> and <a href="https://github.com/mirage/irmin">irmin</a> in the near future.</p>
<p>Oh yes, and somewhere in there, I did find time to see some cats, eat tajine, wander around the medina, and enjoy all of the wonder that <a href="http://queenofthemedina.com">Priscilla, the Queen of the Medina</a> and her lovely hosts have to offer.  Thanks to everyone who did the hard work of organizing, feeding, and laundering this group of itinerant hackers!</p>
<p><hr/></p>
<h2 id="Ximin-Luo">Ximin Luo</h2>

<p>This was my third MirageOS hack retreat, I continued right where I left off last time.</p>
<p>I've had a pet project for a while to develop a end-to-end secure protocol for group messaging. One of its themes is to completely separate the transport and application layers, by sticking an end-to-end secure session layer in between them, with the aim of unifying all the <em>secure messaging</em> protocols that exist today. Like many pet projects, I haven't had much time to work on it recently, and took the chance to this week.</p>
<p>I worked on implementing a consistency checker for the protocol. This allows chat members to verify everyone is seeing and has seen the same messages, and to distinguish between other members being silent (not sending anything) vs the transport layer dropping packets (either accidentally or maliciously). This is built on top of my as-yet-unreleased pure library for setting timeouts, monitors (scheduled tasks) and expectations (promises that can timeout), which I worked on in the previous hackathons.</p>
<p>I also wrote small libraries for doing 3-valued and 4-valued logic, useful for implementing complex control flows where one has to represent different control states like <code>success</code>, <code>unknown/pending</code>, <code>temporary failure</code>, <code>permanent failure</code>, and be able to compose these states in a logically coherent way.</p>
<p>For my day-to-day work I work on the <a href="https://reproducible-builds.org/">Reproducible Builds</a>, and as part of this we write patches and/or give advice to compilers on how to generate output deterministically. I showed Gabriel Scherer our testing framework with our results for various ocaml libraries, and we saw that the main remaining issue is that the build process embeds absolute paths into the output. I explained our <code>BUILD_PATH_PREFIX_MAP</code> mechanism for stripping this information without negatively impacting the build result, and he implemented this for the ocaml compiler. It works for findlib! Then, I need to run some wider tests to see the overall effect on all ocaml packages. Some of the non-reproducibility is due to GCC and/or GAS, and more analysis is needed to distinguish these cases.</p>
<p>I had very enjoyable chats with Anton Bachin about continuation-passing style, call-cc, coroutines, and lwt; and with Gabriel Scherer about formal methods, proof systems, and type systems.</p>
<p>For fun times I carried on the previous event's tradition of playing Cambio, teaching it to at least half of other people here who all seemed to enjoy it very much! I also organised a few mini walks to places a bit further out of the way, like Gueliz and the Henna Art Cafe.</p>
<p>On the almost-last day, I decided to submerge myself in the souks at 9am or so and explored it well enough to hopefully never get lost in there ever again! The existing data on OpenStreetMap for the souks is actually er, <em>topologically accurate</em> shall we say, except missing some side streets. :)</p>
<p>All-in-all this was another enjoyable event and it was good to be back in a place with nice weather and tasty food!</p>
<p><hr/></p>
<h2 id="Martin-Keegan">Martin Keegan</h2>

<p>My focus at the retreat was on working out how to improve the documentation.
This decomposed into</p>
<ul><li>encouraging people to fix the build for the docs system</li><li>talking to people to find out what the current state of Mirage is</li><li>actually writing some material and getting it merged</li></ul>

<p>What I learnt was</p>
<ul><li>which backends are in practice actually usable today</li><li>the current best example unikernels</li><li>who can actually get stuff done</li><li>how the central configuration machinery of <code>mirage configure</code> works today</li><li>what protocols and libraries are currently at the coal-face</li><li>that some important documentation exists in the form of blog posts</li></ul>

<p>I am particularly grateful to Mindy Preston and Thomas Gazagnaire for
their assistance on documentation. I am continuing the work now that I
am back in Cambridge.</p>
<p>The tone and pace of the retreat was just right, for which Hannes is
due many thanks.</p>
<p>On the final day, I gave a brief presentation about the use of OCaml
for making part of a vote counting system, focusing on the practicalities
and cost of explaining to laymen the guarantees provided by <code>.mli</code>
interface files, with an implicit comparison to the higher cost in more
conventional programming languages.</p>
<p>The slides for the talk as delivered <a href="http://mk.ucant.org/media/talks/2017-12-05_OCaml-Marrakesh-STV/">are here</a>, but it deserves its own
blog post.</p>
<p><hr/></p>
<h2 id="Michele-Orr">Michele Orrù</h2>

<p>This year's Marrakech experience has been been a bit less productive than
past years'. I indulged a bit more chatting to people, and pair programming with
them.</p>
<p>I spent some of my individual time time getting my hands dirty with the Jsonm
library, hoping that I would have been able to improve the state of my
ocaml-letsencrypt library; I also learned how to integrate ocaml API in C,
improving and updating the ocaml-scrypt library, used by another fellow mirage
user in order to develop its own password manager.
Ultimately, I'm not sure either direction I took was good: a streaming Json library is
perhaps not the best choice for an application that shares few jsons (samoht
should have been selling more his <a href="https://github.com/mirage/ezjsonm">easyjson</a> library!), and the ocaml-scrypt
library has been superseeded by the pure implementation <a href="https://github.com/abeaumont/ocaml-scrypt-kdf">ocaml-scrypt-kdf</a>, which
supposedly will make the integration in mirage easier.</p>
<p>The overall warm atmosphere and the overall positive attitude of the
group make me still think of this experience as a positive learning experience,
and how they say: failure the best teacher is.</p>
<p><hr/></p>
<h2 id="Reynir-Bj-rnsson">Reynir Björnsson</h2>

<p>For the second time this year (and ever) I went to Marrakech to participate in the MirageOS hack retreat / unconference.
I wrote about my <a href="http://reyn.ir/posts/2017-03-20-11-27-Marrakech%202017.html">previous trip</a>.</p>
<h3 id="The-walk-from-the-airport">The walk from the airport</h3>

<p>Unlike the previous trip I didn't manage to meet any fellow hackers at the RAK airport.
Considering the annoying haggling taking a taxi usually involves and that the bus didn't show up last time I decided to walk the 5.3 km from the airport to Priscilla (the venue).
The walk to <a href="https://en.wikipedia.org/wiki/Jemaa_el-Fnaa">Jemaa el-Fnaa</a> (AKA 'Big Square') was pretty straight forward.
Immediately after leaving the airport area I discovered every taxi driver would stop and tell me I needed a ride.
I therefore decided to walk on the opposite side of the road.
This made things more difficult because I then had more difficulties reading the road signs.
Anyway, I found my way to the square without any issues, although crossing the streets on foot requires cold blood and nerves of steel.</p>
<p>Once at the square I noticed a big café with lots of lights that I recognized immediately.
I went past it thinking it was Café de France.
It was not.
I spent about 30-40 minutes practicing my backtracking skills untill I finally gave up.
I went back to the square in order to call Hannes and arrange a pickup.
The two meeting points at the square was some juice stand whose number I couldn't remember and Café de France, so I went looking for the latter.
I quickly realized my mistake, and once I found the correct café the way to Priscilla was easy to remember.</p>
<p>All in all I don't recommend walking unless you <em>definitely</em> know the way and is not carrying 12-15 kg of luggage.</p>
<h3 id="People">People</h3>

<p>Once there I met new and old friends.
Some of the old friends I had seen at <a href="https://bornhack.dk">Bornhack</a> while others I hadn't seen since March.
In either case it was really nice to meet them again!
As for the new people it's amazing how close you can get with strangers in just a week.
I had some surprisingly personal conversations with people I had only met a few days prior.
Lovely people!</p>
<h3 id="My-goals">My goals</h3>

<p>Two months prior to the hack retreat I had started work on implementing the ssh-agent protocol.
I started the project because I couldn't keep up with Christiano's <a href="https://github.com/haesbaert/awa-ssh">awa-ssh</a> efforts in my limited spare time, and wanted to work on something related that might help that project.
My goals were to work on my <a href="https://github.com/reynir/ocaml-ssh-agent">ocaml-ssh-agent</a> implementation as well as on awa-ssh.</p>
<p>Before going to Marrakech I had had a stressful week at work.
I had some things to wrap up before going to a place without a good internet connection.
I therefore tried to avoid doing anything on the computer the first two days.
On the plane to Marrakech I had taken up knitting again - something I hadn't done in at least two years.
The morning of the first day I started knitting.
Eventually I had to stop knitting because I had drunk too much coffee for me to have steady enough hands to continue, so I started the laptop despite my efforts not to.
I then looked at awa-ssh, and after talking with Christiano I made the first (and sadly only) contribution to awa-ssh of that trip:
The upstream <a href="https://github.com/mirleft/ocaml-nocrypto">nocrypto</a> library had been changed in a way that required changes to awa-ssh.
I rewrote the digest code to reflect the upstream changes, and refactored the code on suggestion by Christiano.</p>
<p>In ocaml-ssh-agent I was already using <a href="https://github.com/inhabitedtype/angstrom">angstrom</a> for parsing ssh-agent messages.
I rewrote the serialization from my own brittle cstruct manipulations to using <a href="https://github.com/inhabitedtype/faraday">faraday</a>.
This worked great, except I never quite understood how to use the <code>Faraday_lwt_unix</code> module.
Instead I'm serializing to a string and then writing that string to the <code>SSH_AUTH_SOCK</code>.</p>
<h3 id="GADT-FUN">GADT !!!FUN!!!</h3>

<p>The ssh-agent is a request-response protocol.
Only a certain subset of the responses are valid for each request.
I wanted to encode that relationship into the types so that the user of the library wouldn't have to deal with invalid responses.
In order to do that I got help by <a href="https://github.com/aantron">@aantron</a> to implement this with GADTs.
The basic idea is a phantom type is added to the request and response types.
The phantom type, called request_type, is a polymorphic variant that reflects the kind of requests that are possible.
Each response is parameterized with a subset of this polymorphic variant.
For example, every request can fail, so <code>Ssh_agent_failure</code> is parameterized with the whole set,
while <code>Ssh_agent_identities_answer</code> is parameterized with <code>`Ssh_agent_request_identities</code>,
and <code>Ssh_agent_success</code> is parameterized with <code>`Ssh_agent_successable</code> - a collapse of all the request types that can either return success or failure.</p>
<p>This worked great except it broke the typing of my parser -
The compiler can't guess what the type parameter should be for the resulting <code>ssh_agent_response</code>.
To work around that <a href="https://github.com/gasche">@gasche</a> helped me solve that problem by introducing an existential type:</p>
<pre class="OCaml"><code class="OCaml">    type any_ssh_agent_response = Any_response : 'a ssh_agent_response -&gt; any_ssh_agent_response</code></pre>

<p>Using this I could now write a function <code>unpack_any_response</code> which 'discards' every response that doesn't make sense for a particular request.
Its type is the following:</p>
<pre class="OCaml"><code class="OCaml">    val unpack_any_response : 'a ssh_agent_request -&gt; any_ssh_agent_response -&gt;
                              ('a ssh_agent_response, string) result</code></pre>

<p>Now I want to write a <code>listen</code> function that takes a handler of type <code>'a ssh_agent_request -&gt; 'a ssh_agent_response</code>, in other words a handler that can only create valid response types.
This unfortunately doesn't type check.
The parser returns an existential
<code>type any_ssh_agent_request = Any_request : 'req_type ssh_agent_request -&gt; any_ssh_agent_request</code>.
This is causing me a problem: the <code>'req_type</code> existential would escape.
I do not know how to solve this problem, or if it's possible to solve it at all.
I discussed this issue with <a href="http://github.com/infinity0">@infinity0</a> after the retreat, and we're not very optimistic.
Perhaps someone in <code>#ocaml</code> on Freenode might know a trick.</p>
<pre class="OCaml"><code class="OCaml">    let listen ((ic, oc) : in_channel * out_channel)
        (handler : 'a Ssh_agent.ssh_agent_request -&gt; 'a Ssh_agent.ssh_agent_response) =
      match Angstrom_unix.parse Ssh_agent.Parse.ssh_agentc_message ic with
      | { len = 0; _ }, Ok (Ssh_agent.Any_request request) -&gt;
        Ok (Ssh_agent.Any_response (handler response))
      | { len; _ }, Ok _ -&gt;
        Error &quot;Additional data in reply&quot;
      | _, Error e -&gt;
        Error e</code></pre>

<h3 id="Ideas-for-uses-of-ocaml-ssh-agent">Ideas for uses of ocaml-ssh-agent</h3>

<p>Besides the obvious use in a ssh-agent client in a ssh client, the library could be used to write an ssh-agent unikernel.
This unikernel could then be used in <a href="https://www.qubes-os.org/">Qubes OS</a> in the same way as <a href="https://github.com/henn/qubes-app-split-ssh">Qubes Split SSH</a> where the ssh-agent is running in a separate VM not connected to the internet.
Furthermore, <a href="https://github.com/cfcs">@cfcs</a> suggested an extension could be implemented such that only identities relevant for a specific host or host key are offered by the ssh-agent.
When one connects to e.g. github.com using ssh keys all the available public keys are sent to the server.
This allows the server to do finger printing of the client since the set of keys is likely unique for that machine, and may leak information about keys irrelevant for the service (Github).
This requires a custom ssh client which may become a thing with awa-ssh soon-ish.</p>
<h3 id="Saying-goodbye">Saying goodbye</h3>

<p>Leaving such lovely people is always difficult.
The trip to the airport was emotional.
It was a chance to spend some last few moments with some of the people from the retreat knowing it was also the last chance this time around.
I will see a lot of the participants at 34c3 in 3 weeks already, while others I might not see again in the near future.
I do hope to stay in contact with most of them online!</p>
<p>Thank you for yet another great retreat!</p>
<p><hr/>Many thanks to everyone involved!  The hostel is already booked for <a href="http://retreat.mirage.io">another retreat in March 2018</a>...</p>
</div></content><id>https://mirage.io/blog/2017-winter-hackathon-roundup</id><title type="text">MirageOS Winter 2017 hack retreat roundup</title><updated>2017-12-23T16:00:00-00:00</updated><author><email>hm519@cam.ac.uk</email><uri>https://github.com/hannesm</uri><name>Hannes Mehnert</name></author></entry><entry><source><updated>2018-07-23T06:49:17-00:00</updated><link title="Frama-C RSS News" type="text/html" href="http://frama-c.com/" rel="related"/><link title="Frama-C RSS News" type="application/rss+xml" href="http://frama-c.com/rss.xml" rel="self"/><id>http://frama-c.com/</id><title type="text">Frama-C RSS News</title><author><name>Frama-C</name></author></source><link href="http://frama-c.com/index.html" rel="alternate"/><id>http://frama-c.com/index.html#35c37fe7157d9b74d92a6e8cf4fc9923</id><title type="text">frama-clang 0.0.4, compatible with Frama-C 16 is out. Download ithere.</title><updated>2017-12-21T09:38:47-00:00</updated><author><name>Frama-C</name></author></entry><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/141.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">

&lt;a href=&quot;/coq-87&quot;&gt;Version 8.7.1 of Coq&lt;/a&gt; is available. It brings compatibility with OCaml 4.06.0, many bug fixes, documentation improvements, and user message improvements (for details see the &lt;a href=&quot;https://github.com/coq/coq/milestone/10?closed=1&quot;&gt;8.7.1 milestone&lt;/a&gt;).


 </content><id>https://coq.inria.fr/news/141.html</id><title type="text">Coq 8.7.1 is out</title><updated>2017-12-15T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2017-12-14T00:00:00-00:00</updated><link title="OCaml Labs" type="text/html" href="https://ocamllabs.github.io//" rel="related"/><link title="OCaml Labs" type="application/rss+xml" href="http://ocamllabs.io/feed.xml" rel="self"/><generator>Jekyll v3.6.2</generator><id>https://ocamllabs.github.io//</id><title type="text">OCaml Labs</title><author><name>OCaml Labs</name></author></source><link href="https://ocamllabs.github.io//general/2017/12/14/DerivingCrowbar.html" rel="alternate"/><content xml:base="http://ocamllabs.io/feed.xml" type="html">&lt;h1 id=&quot;testing-ocaml-migrate-parsetree-with-ppx_deriving_crowbar&quot;&gt;testing ocaml-migrate-parsetree with &lt;code class=&quot;highlighter-rouge&quot;&gt;ppx_deriving_crowbar&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/stedolan/crowbar/issues/7&quot;&gt;Early feedback&lt;/a&gt; on Crowbar suggested that some automated method of constructing generators might be useful.  It wasn’t necessary to do this immediately for &lt;a href=&quot;https://github.com/yomimono/ocaml-test-stdlib&quot;&gt;the demonstration of testing the OCaml standard library’s Map and Set functors&lt;/a&gt; with Crowbar, but what about more complicated types?  Like, say, the complicated and heavily mutually recursive types that compose &lt;a href=&quot;https://github.com/ocaml/ocaml/blob/trunk/parsing/parsetree.mli&quot;&gt;OCaml parsetrees&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;With an eye to solving this problem, I looked into a few options and finally settled on using &lt;a href=&quot;https://github.com/ocaml-ppx/ppx_deriving&quot;&gt;ppx_deriving&lt;/a&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;ppx_deriving&lt;/code&gt; is “a library simplifying type-driven code generation”, and not just for the author of an automatic code-generating tool, but also for the user who might wish to use such tools, or the maintainer who wants to be sure that multiple tools can be used together easily.  Using &lt;code class=&quot;highlighter-rouge&quot;&gt;ppx_deriving&lt;/code&gt;, one can annotate a type &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type t = {
  a : int;
  b : Parsetree.core_type;
} [@@deriving myplugin]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;myplugin&lt;/code&gt; will have a chance to generate code based on the structure of &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I was able to create such a tool for Crowbar, creatively named &lt;a href=&quot;https://github.com/yomimono/ppx_deriving_crowbar&quot;&gt;ppx_deriving_crowbar&lt;/a&gt;.  The plugin is still in an experimental state, but mostly fulfills the requirements for &lt;code class=&quot;highlighter-rouge&quot;&gt;ppx_deriving&lt;/code&gt; plugins set out in that project’s README.  It is capable of making generators for &lt;a href=&quot;https://github.com/yomimono/ocaml-test-omp/blob/primary/test/parsetree_405.ml&quot;&gt;OCaml 4.05 parsetrees&lt;/a&gt; and certificates for the &lt;a href=&quot;https://github.com/mirleft/ocaml-x509&quot;&gt;x509 library&lt;/a&gt;, and probably much more!&lt;/p&gt;
</content><category term="General"/><id>https://ocamllabs.github.io//general/2017/12/14/DerivingCrowbar.html</id><title type="text">testing ocaml-migrate-parsetree with `ppx_deriving_crowbar`</title><updated>2017-12-14T00:00:00-00:00</updated><author><name>OCaml Labs</name></author></entry><entry><source><updated>2018-08-25T09:31:17-00:00</updated><link title="Mathematics and Computation" type="text/html" href="http://math.andrej.com" rel="related"/><link title="Mathematics and Computation" type="application/rss+xml" href="http://math.andrej.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.8-alpha-40048</generator><id>http://math.andrej.com</id><title type="text">Mathematics and Computation</title><author><name>Andrej Bauer</name></author></source><link href="http://math.andrej.com/2017/12/11/spartan-type-theory/" rel="alternate"/><link href="http://math.andrej.com/2017/12/11/spartan-type-theory/#comments" rel="related"/><content xml:base="http://math.andrej.com/feed/" type="html">&lt;p&gt;The slides from the talk &amp;#8220;Spartan type theory&amp;#8221;, given at the &lt;a href=&quot;https://unimath.github.io/bham2017/&quot;&gt;School and Workshop on Univalent Mathematics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Download slides with speaker notes: &lt;a href=&quot;http://math.andrej.com/wp-content/uploads/2017/12/Spartan-Type-Theory.pdf&quot;&gt;Spartan Type Theory&lt;/a&gt; [PDF]&lt;/strong&gt;&lt;/p&gt;
</content><category term="Tutorial"/><id>http://math.andrej.com/?p=2001</id><title type="text">Spartan type theory</title><updated>2017-12-11T13:52:01-00:00</updated><author><name>Andrej Bauer</name></author></entry><entry><source><updated>2018-09-17T03:42:40-00:00</updated><subtitle xml:base="http://blog.shaynefletcher.org/feeds/posts/default/-/OCaml" type="html">&quot;Hooked&quot; on programming</subtitle><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/-/OCaml/-/OCaml?start-index=26&amp;max-results=25" rel="next"/><link href="http://pubsubhubbub.appspot.com/" rel="hub"/><link type="text/html" href="http://blog.shaynefletcher.org/search/label/OCaml" rel="alternate"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/-/OCaml" rel="self"/><link type="application/atom+xml" href="http://blog.shaynefletcher.org/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed"/><generator uri="http://www.blogger.com" version="7.00">Blogger</generator><category term="recursive descent"/><category term="ppf"/><category term="ocaml-migrate-parse-tree"/><category term="left recursion"/><category term="grammars"/><category term="balanced binary search trees"/><category term="Windows 8.1"/><category term="Windows 7"/><category term="Variance"/><category term="Unix tree"/><category term="Universal type"/><category term="Universal Gas Constant"/><category term="Traversable"/><category term="Transpose"/><category term="Tail recursion"/><category term="Subtyping"/><category term="Stack overflow"/><category term="Sorting"/><category term="Simulation"/><category term="Sieve of Eratosthenes"/><category term="Science"/><category term="Rings"/><category term="Recursion"/><category term="Priority queue"/><category term="Pretty-printing"/><category term="Poof"/><category term="Polynomials"/><category term="Polymorphic variants"/><category term="Permutation"/><category term="Pascal"/><category term="Numerical analysis"/><category term="Monty Hall"/><category term="Monoid"/><category term="Modules"/><category term="List comprehensions"/><category term="Leftist heap"/><category term="Labeled arguments"/><category term="Ideal Gas Law"/><category term="Horner's rule"/><category term="Graph"/><category term="Functors"/><category term="Functor"/><category term="Financial Modeling in Python"/><category term="Exponentiation by squaring"/><category term="Dijkstra"/><category term="Compression"/><category term="Combination"/><category term="Church-Turing thesis"/><category term="Church numerals"/><category term="Cartesian product"/><category term="Applicative functor"/><category term="64-bit"/><category term="ppx"/><category term="ocamlyacc"/><category term="ocamllex"/><category term="Y Combinator"/><category term="Taylor polynomials"/><category term="Streams"/><category term="Recursive lists"/><category term="Prolog"/><category term="Monads"/><category term="Dimensional analysis"/><category term="Algorithmic complexity"/><category term="Algebra"/><category term="type-classes"/><category term="Regular expressions"/><category term="Powerset"/><category term="Statistics"/><category term="Lexical analysis"/><category term="Haskell"/><category term="Parsing"/><category term="data structures"/><category term="Symbolic computation"/><category term="Lambda calculus"/><category term="Felix"/><category term="Boost"/><category term="Python"/><category term="Algorithms"/><category term="C++"/><category term="Functional programming"/><category term="OCaml"/><id>tag:blogger.com,1999:blog-5012565255225108517</id><title type="text">Shayne Fletcher</title><author><email>noreply@blogger.com</email><name>Shayne Fletcher</name></author></source><published>2017-12-09T15:40:00-00:00</published><link title="How to migrate your ppx to OCaml migrate parsetree" type="text/html" href="http://blog.shaynefletcher.org/2017/12/how-to-migrate-your-ppx-to-ocaml.html" rel="alternate"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/4036074755796484339" rel="self"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/4036074755796484339" rel="edit"/><content xml:base="http://blog.shaynefletcher.org/feeds/posts/default/-/OCaml" type="html">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;           &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;&lt;html&gt;  &lt;head&gt;    &lt;style&gt;.keyword { font-weight : bold ; color : Red } .keywordsign { color : #C04600 } .comment { color : Green } .constructor { color : Blue } .type { color : #5C6585 } .string { color : Maroon } .warning { color : Red ; font-weight : bold } .info { margin-left : 3em; margin-right: 3em } .param_info { margin-top: 4px; margin-left : 3em; margin-right : 3em } .code {   color : #465F91 ;    background-color: #F5F5F5; } pre {   margin-bottom: 4px;   font-family: monospace;    background-color: #F5F5F5; } pre.verbatim, pre.codepre { }&lt;/style&gt;    &lt;title&gt;OCaml migrate parse tree&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;h2&gt;OCaml migrate parse tree&lt;/h2&gt;   &lt;p&gt;Earlier this   year, &lt;a href=&quot;http://blog.shaynefletcher.org/2017/05/preprocessor-extensions-for-code.html&quot;&gt;this   blog post&lt;/a&gt; [2] explored the implementation of a small   preprocessor extension (ppx).   &lt;/p&gt;  &lt;p&gt;The code of the above article worked well enough at the time but   as written, exhibits a problem : new releases of the OCaml compiler   are generally accompanied by evolutions of the OCaml parse tree. The   effect of this is, a ppx written against a specific version of the   compiler will &quot;break&quot; in the presence of later releases of the   compiler. As pointed out in [3], the use of ppx's in the OCaml   eco-system these days is ubiquitous. If each new release of the   OCaml compiler required sychronized updates of each and every ppx   in &lt;a href=&quot;http://opam.ocaml.org/&quot;&gt;opam&lt;/a&gt;, getting new releases   of the compiler out would soon become a near impossibilty.   &lt;/p&gt;  &lt;p&gt;Mitigation of the above problem is provided by   the &lt;a href=&quot;http://opam.ocaml.org/packages/ocaml-migrate-parsetree/&quot;&gt;&lt;code&gt;ocaml-migrate-parsetree&lt;/code&gt;  &lt;/a&gt; library. The library provides the means to convert parsetrees   from one OCaml version to another. This allows the ppx rewriter to   write against a specific version of the parsetree and lets the   library take care of rolling parsetrees backwards and forwards in   versions as necessary.  In this way, the resulting ppx is &quot;forward   compatible&quot; with newer OCaml versions without requiring ppx code   updates.   &lt;/p&gt;  &lt;p&gt;To get the &lt;code&gt;ppx_id_of&lt;/code&gt; code from the earlier blog post   usable with &lt;code&gt;ocaml-migrate-parsetree&lt;/code&gt; required a couple   of small tweaks to make it OCaml 4.02.0 compatible. The changes from   the original code were slight and not of significant enough interest   to be worth presenting here. What is worth looking at is what it   then took to switch the code to   use &lt;code&gt;ocaml-migrate-parsetree&lt;/code&gt;. The answer is : very   little! &lt;pre&gt;&lt;code class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Migrate_parsetree&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;OCaml_402&lt;/span&gt;.&lt;span class=&quot;constructor&quot;&gt;Ast&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Ast_mapper&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Ast_helper&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Asttypes&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Parsetree&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;Longident&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;comment&quot;&gt;(* The original ppx as written before goes here!&lt;br /&gt;   .                    .                   .&lt;br /&gt;   .                    .                   .&lt;br /&gt;   .                    .                   .&lt;br /&gt;*)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; () = &lt;span class=&quot;constructor&quot;&gt;Driver&lt;/span&gt;.register ~name:&lt;span class=&quot;string&quot;&gt;&quot;id_of&quot;&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;OCaml_402&lt;/span&gt;) id_of_mapper&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; The complete code for this article is available online &lt;a href=&quot;https://github.com/shayne-fletcher/zen/tree/master/ocaml/ppx_id_of/v2&quot;&gt;here&lt;/a&gt;and as a bonus, includes a minimal &lt;a href=&quot;https://jbuilder.readthedocs.io/en/latest/&quot;&gt;&lt;code&gt;jbuilder&lt;/code&gt;&lt;/a&gt;build system demonstrating just how well the OCaml tool-chain comes together these days.   &lt;/p&gt;  &lt;hr/&gt;  &lt;p&gt;    References:&lt;br/&gt;     [1] &lt;a href=&quot;https://whitequark.org/blog/2014/04/16/a-guide-to-extension-points-in-ocaml/&quot;&gt;&quot;A      Guide to Extension Points in OCaml&quot; -- Whitequark (blog post      2014)&lt;/a&gt;&lt;br/&gt;     [2] &lt;a href=&quot;http://blog.shaynefletcher.org/2017/05/preprocessor-extensions-for-code.html&quot;&gt;&quot;Preprocessor      extensions for code generation&quot; -- Shayne Fletcher (blog post      2017)&lt;/a&gt;&lt;br/&gt;     [3] &lt;a href=&quot;http://rgrinberg.com/posts/extension-points-3-years-later/&quot;&gt;&quot;Extension      Points - 3 Years Later&quot; -- Rudi Grinberg (blog post 2017)&lt;/a&gt;&lt;br/&gt;  &lt;/p&gt;  &lt;/body&gt;&lt;/html&gt;</content><category scheme="http://www.blogger.com/atom/ns#" term="ppx"/><category scheme="http://www.blogger.com/atom/ns#" term="ocaml-migrate-parse-tree"/><category scheme="http://www.blogger.com/atom/ns#" term="OCaml"/><id>tag:blogger.com,1999:blog-5012565255225108517.post-4036074755796484339</id><title type="text">How to migrate your ppx to OCaml migrate parsetree</title><updated>2017-12-09T15:42:37-00:00</updated><author><email>noreply@blogger.com</email><uri>https://plus.google.com/104436573144909855029</uri><name>Shayne Fletcher</name></author></entry><entry><source><updated>2018-07-23T06:49:17-00:00</updated><link title="Frama-C RSS News" type="text/html" href="http://frama-c.com/" rel="related"/><link title="Frama-C RSS News" type="application/rss+xml" href="http://frama-c.com/rss.xml" rel="self"/><id>http://frama-c.com/</id><title type="text">Frama-C RSS News</title><author><name>Frama-C</name></author></source><link href="http://frama-c.com/index.html" rel="alternate"/><id>http://frama-c.com/index.html#e032fbeb262219339e6850bd48342f37</id><title type="text">Frama-C 16 - Sulfur is out. Download ithere.</title><updated>2017-11-28T16:00:00-00:00</updated><author><name>Frama-C</name></author></entry><entry><source><updated>2017-11-21T21:00:00-00:00</updated><link title="OCaml Labs compiler hacking" type="text/html" href="http://ocamllabs.github.com/compiler-hacking/" rel="related"/><link title="OCaml Labs compiler hacking" type="application/rss+xml" href="http://ocamllabs.github.com/compiler-hacking/rss.xml" rel="self"/><id>http://ocamllabs.github.com/compiler-hacking/</id><title type="text">OCaml Labs compiler hacking</title><author><name>OCaml Labs compiler hacking</name></author></source><link href="http://ocamllabs.github.com/compiler-hacking/2017/11/21/eighteenth-compiler-hacking-december" rel="alternate"/><content xml:base="http://ocamllabs.github.com/compiler-hacking/rss.xml" type="html">&lt;p&gt;Our next OCaml Compiler Hacking event will be on Thursday 7th December in The Thomas Gray Room at Pembroke College, Cambridge.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re planning to come along, it&amp;#39;d be helpful if you could &lt;a href=&quot;https://doodle.com/poll/khqk6i49r4828apu&quot;&gt;indicate interest via Doodle&lt;/a&gt; and &lt;a href=&quot;http://lists.ocaml.org/admin/cam-compiler-hacking&quot;&gt;sign up to the mailing list&lt;/a&gt; to receive updates.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;When&lt;/strong&gt;&lt;/em&gt;: Thursday 7 December 2017, 19:00 - 22:30&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Where&lt;/strong&gt;&lt;/em&gt;: The Thomas Gray Room, Pembroke College, Cambridge CB2 1RF&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Who&lt;/strong&gt;&lt;/em&gt;: anyone interested in improving OCaml. Knowledge of OCaml programming will obviously be helpful, but prior experience of working on OCaml internals isn&amp;#39;t necessary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Refreshments&lt;/strong&gt;&lt;/em&gt;: Finger buffet in hack room.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;What&lt;/strong&gt;&lt;/em&gt;: fixing bugs, implementing new features, learning about OCaml internals&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Wiki&lt;/strong&gt;&lt;/em&gt;: https://github.com/ocamllabs/compiler-hacking/wiki&lt;/p&gt;

&lt;p&gt;This hack evening focuses on fixing up opam packages as well as work on the OCaml compiler.&lt;/p&gt;

&lt;p&gt;The OCaml 4.06 release featured safe-string as the default rather than optional as per previous releases. The focus of this event will be to work on the opam repository to fix up as many packages as possible, and also to publish a guide on &lt;a href=&quot;http://ocamllabs.io/&quot;&gt;ocamllabs.io&lt;/a&gt; detailing how to migrate your packages for wider use.&lt;/p&gt;

&lt;p&gt;The evening will also feature a short (5-10 min) presentation about recent &lt;a href=&quot;http://marrakech2017.mirage.io/&quot;&gt;MirageOS Marrakech Hack Retreat&lt;/a&gt;.​&lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2017/11/21/eighteenth-compiler-hacking-december</id><title type="text">Eighteenth OCaml compiler hacking evening at Pembroke, Cambridge</title><updated>2017-11-21T21:00:00-00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk</email><name>OCaml Labs</name></author></entry><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/140.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">
&lt;p&gt;After several years of using GitHub specifically for its pull request system,
the Coq development team has migrated the
&lt;a href=&quot;https://github.com/coq/coq/issues&quot;&gt;Coq bug tracker&lt;/a&gt; and
&lt;a href=&quot;https://github.com/coq/coq/wiki&quot;&gt;Cocorico, the Coq wiki&lt;/a&gt;
to GitHub as well.&lt;/p&gt;

&lt;p&gt;More information about the migration of the Coq bug tracker may be found in this
&lt;a href=&quot;https://www.theozimmermann.net/2017/10/bugzilla-to-github/&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More information about the migration of Cocorico, the Coq wiki, may be found on this
&lt;a href=&quot;https://github.com/coq/coq/wiki/WikiMigration&quot;&gt;wiki page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the GitHub repository is now the repository we push to
(as opposed to a mirror). Make sure that your git clone is tracking
&lt;a href=&quot;https://github.com/coq/coq&quot;&gt;https://github.com/coq/coq.git&lt;/a&gt;
to be always up-to-date.&lt;/p&gt;

 </content><id>https://coq.inria.fr/news/140.html</id><title type="text">Migration to GitHub is complete</title><updated>2017-11-21T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2018-08-21T00:00:00-00:00</updated><link title="Drup's thingies" type="text/html" href="https://drup.github.io/" rel="related"/><link title="Drup's thingies" type="application/rss+xml" href="http://drup.github.io/feed-ocaml.xml" rel="self"/><id>https://drup.github.io/</id><title type="text">Drup's thingies</title><author><name>Gabriel Radanne</name></author></source><link href="https://drup.github.io/2017/11/15/phdthesis/" rel="alternate"/><content xml:base="http://drup.github.io/feed-ocaml.xml" type="html">
        
        
        
        &lt;p&gt;I’m happy to announce that I successfully defended my PhD Thesis!&lt;/p&gt;


        
        </content><id>https://drup.github.io/2017/11/15/phdthesis/</id><title type="text">PhD Thesis: Tierless Web programming in ML | Drup's thingies</title><updated>2017-11-15T00:00:00-00:00</updated><author><name>Gabriel Radanne</name></author></entry><entry><source><updated>2018-09-17T03:42:40-00:00</updated><subtitle xml:base="http://blog.shaynefletcher.org/feeds/posts/default/-/OCaml" type="html">&quot;Hooked&quot; on programming</subtitle><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/-/OCaml/-/OCaml?start-index=26&amp;max-results=25" rel="next"/><link href="http://pubsubhubbub.appspot.com/" rel="hub"/><link type="text/html" href="http://blog.shaynefletcher.org/search/label/OCaml" rel="alternate"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/-/OCaml" rel="self"/><link type="application/atom+xml" href="http://blog.shaynefletcher.org/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed"/><generator uri="http://www.blogger.com" version="7.00">Blogger</generator><category term="recursive descent"/><category term="ppf"/><category term="ocaml-migrate-parse-tree"/><category term="left recursion"/><category term="grammars"/><category term="balanced binary search trees"/><category term="Windows 8.1"/><category term="Windows 7"/><category term="Variance"/><category term="Unix tree"/><category term="Universal type"/><category term="Universal Gas Constant"/><category term="Traversable"/><category term="Transpose"/><category term="Tail recursion"/><category term="Subtyping"/><category term="Stack overflow"/><category term="Sorting"/><category term="Simulation"/><category term="Sieve of Eratosthenes"/><category term="Science"/><category term="Rings"/><category term="Recursion"/><category term="Priority queue"/><category term="Pretty-printing"/><category term="Poof"/><category term="Polynomials"/><category term="Polymorphic variants"/><category term="Permutation"/><category term="Pascal"/><category term="Numerical analysis"/><category term="Monty Hall"/><category term="Monoid"/><category term="Modules"/><category term="List comprehensions"/><category term="Leftist heap"/><category term="Labeled arguments"/><category term="Ideal Gas Law"/><category term="Horner's rule"/><category term="Graph"/><category term="Functors"/><category term="Functor"/><category term="Financial Modeling in Python"/><category term="Exponentiation by squaring"/><category term="Dijkstra"/><category term="Compression"/><category term="Combination"/><category term="Church-Turing thesis"/><category term="Church numerals"/><category term="Cartesian product"/><category term="Applicative functor"/><category term="64-bit"/><category term="ppx"/><category term="ocamlyacc"/><category term="ocamllex"/><category term="Y Combinator"/><category term="Taylor polynomials"/><category term="Streams"/><category term="Recursive lists"/><category term="Prolog"/><category term="Monads"/><category term="Dimensional analysis"/><category term="Algorithmic complexity"/><category term="Algebra"/><category term="type-classes"/><category term="Regular expressions"/><category term="Powerset"/><category term="Statistics"/><category term="Lexical analysis"/><category term="Haskell"/><category term="Parsing"/><category term="data structures"/><category term="Symbolic computation"/><category term="Lambda calculus"/><category term="Felix"/><category term="Boost"/><category term="Python"/><category term="Algorithms"/><category term="C++"/><category term="Functional programming"/><category term="OCaml"/><id>tag:blogger.com,1999:blog-5012565255225108517</id><title type="text">Shayne Fletcher</title><author><email>noreply@blogger.com</email><name>Shayne Fletcher</name></author></source><published>2017-11-11T14:32:00-00:00</published><link title="Towers of Hanoi" type="text/html" href="http://blog.shaynefletcher.org/2017/11/towers-of-hanoi.html" rel="alternate"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/2688716903670987691" rel="self"/><link type="application/atom+xml" href="http://www.blogger.com/feeds/5012565255225108517/posts/default/2688716903670987691" rel="edit"/><content xml:base="http://blog.shaynefletcher.org/feeds/posts/default/-/OCaml" type="html">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;           &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;&lt;html&gt;  &lt;head&gt;    &lt;style&gt;      .keyword { font-weight : bold ; color : Red }       .keywordsign { color : #C04600 }       .comment { color : Green }       .constructor { color : Blue }       .type { color : #5C6585 }       .string { color : Maroon }       .warning { color : Red ; font-weight : bold }       .info { margin-left : 3em; margin-right: 3em }       .param_info { margin-top: 4px; margin-left : 3em; margin-right : 3em }       .code {       color : #465F91 ;        background-color: #F5F5F5;       }       pre {       margin-bottom: 4px;       font-family: monospace;        background-color: #F5F5F5;       }       pre.verbatim, pre.codepre { }     &lt;/style&gt;    &lt;title&gt;Towers of Hanoi&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-uIdWt5l_kzY/WgcJ2KR3ScI/AAAAAAAABxw/ZOp900ZzLNQd2Zs5wxAZQHStnjWVK1hQgCLcBGAs/s1600/tower_of_hanoi_fig1_600.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-uIdWt5l_kzY/WgcJ2KR3ScI/AAAAAAAABxw/ZOp900ZzLNQd2Zs5wxAZQHStnjWVK1hQgCLcBGAs/s320/tower_of_hanoi_fig1_600.jpg&quot; width=&quot;320&quot; height=&quot;159&quot; data-original-width=&quot;600&quot; data-original-height=&quot;298&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;The &quot;towers of Hanoi&quot; problem is stated like this. There are three pegs labelled &lt;i&gt;a&lt;/i&gt;, &lt;i&gt;b&lt;/i&gt; and &lt;i&gt;c&lt;/i&gt;. On peg &lt;i&gt;a&lt;/i&gt; there is a stack of &lt;i&gt;n&lt;/i&gt; disks of increasing size, the largest at the bottom, each with a hole in the middle to accomodate the peg. The problem is to transfer the stack of disks to peg &lt;i&gt;c&lt;/i&gt;, one disk at a time, in such a way as to ensure that no disk is ever placed on top of a smaller disk. &lt;/p&gt;&lt;p&gt;The problem is amenable to a divide and conquer strategy : &quot;Move the top &lt;i&gt;n - 1&lt;/i&gt; disks from peg &lt;i&gt;a&lt;/i&gt; to peg &lt;i&gt;b&lt;/i&gt;, move the remaining largest disk from peg &lt;i&gt;a&lt;/i&gt; to peg &lt;i&gt;c&lt;/i&gt; then, move the &lt;i&gt;n - 1&lt;/i&gt; disks on peg &lt;i&gt;b&lt;/i&gt; to peg &lt;i&gt;c&lt;/i&gt;.&quot; &lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;code class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;rec&lt;/span&gt; towers n from to_ spare =&lt;br /&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n &amp;gt; 0 &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&lt;br /&gt;      towers (n - 1) from spare to_;&lt;br /&gt;      &lt;span class=&quot;constructor&quot;&gt;Printf&lt;/span&gt;.printf  &lt;span class=&quot;string&quot;&gt;&lt;br /&gt;               &quot;Move the top disk from peg %c to peg %c\n&quot;&lt;/span&gt; from to_;&lt;br /&gt;      towers (n - 1) spare to_ from&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;br /&gt;  ()&lt;br /&gt;;;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;For example, the invocation &lt;code class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; () = towers 3 &lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'c'&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;&lt;/code&gt;will generate the recipie &lt;pre&gt;Move the top disk from peg a to peg c&lt;br /&gt;Move the top disk from peg a to peg b&lt;br /&gt;Move the top disk from peg c to peg b&lt;br /&gt;Move the top disk from peg a to peg c&lt;br /&gt;Move the top disk from peg b to peg a&lt;br /&gt;Move the top disk from peg b to peg c&lt;br /&gt;Move the top disk from peg a to peg c&lt;br /&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Let &lt;i&gt;T(n)&lt;/i&gt; be the time complexity of &lt;code&gt;towers (x, y, z)&lt;/code&gt;, when the characteristic operation is the moving of a disk from one peg to another. The time complexity of &lt;code&gt;towers(n - 1, x, y z)&lt;/code&gt; is &lt;i&gt;T(n - 1)&lt;/i&gt; by definition and no further investigation is needed. &lt;i&gt;T(0) = 0&lt;/i&gt; because the test &lt;code&gt;n &gt;0&lt;/code&gt; fails and no disks are moved. For larger &lt;code&gt;n&lt;/code&gt;, the expression &lt;code&gt;towers (n - 1, from, spare, to_)&lt;/code&gt; is evaluated with cost &lt;i&gt;T(n - 1)&lt;/i&gt; followed by &lt;code&gt;&lt;span class=&quot;constructor&quot;&gt;Printf&lt;/span&gt;.printf  &lt;span class=&quot;string&quot;&gt;&quot;Move the top disk from peg %c to peg %c\n&quot;&lt;/span&gt; from to_ &lt;/code&gt; with cost &lt;i&gt;1&lt;/i&gt; and finally, &lt;code&gt;towers(n - 1, spare, to_, from)&lt;/code&gt; again with cost &lt;i&gt;T(n - 1)&lt;/i&gt;. &lt;/p&gt;&lt;p&gt;Summing these contributions gives the recurrence relation &lt;i&gt;T(n) = 2T(n - 1) + 1&lt;/i&gt; where &lt;i&gt;T(0) = 0&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;Repeated substituition can be used to arrive at a closed form for &lt;i&gt;T(n)&lt;/i&gt;, since, &lt;i&gt;T(n) = 2T(n - 1) + 1 = 2[2T(n - 2) + 1] + 1 = 2[2[2T(n - 3) +1] + 1] + 1 = 2&lt;sup&gt;3&lt;/sup&gt;T(n - 3) + 2&lt;sup&gt;2&lt;/sup&gt; + 2&lt;sup&gt;1&lt;/sup&gt; + 2&lt;sup&gt;0&lt;/sup&gt;&lt;/i&gt; (provided &lt;i&gt;n &amp;ge;&lt;/i&gt; 3), expanding the brackets in a way that elucidates the emerging pattern. If this substitution is repeated &lt;i&gt;i&lt;/i&gt; times then clearly the result is &lt;i&gt;T(n) = 2&lt;sup&gt;i&lt;/sup&gt;T(n - i) + 2&lt;sup&gt;i - 1&lt;/sup&gt; + 2&lt;sup&gt;i - 2&lt;/sup&gt; + &amp;middot;&amp;middot;&amp;middot; + 2&lt;sup&gt;0&lt;/sup&gt;&lt;/i&gt; (&lt;i&gt;n &amp;ge; i&lt;/i&gt;). The largest possible value &lt;i&gt;i&lt;/i&gt; can take is &lt;i&gt;n&lt;/i&gt;and if &lt;i&gt;i = n&lt;/i&gt; then &lt;i&gt;T(n - i) = T(0) = 0&lt;/i&gt; and so we arrive at &lt;i&gt;T(n) = 2&lt;sup&gt;n&lt;/sup&gt;0 + 2&lt;sup&gt;n - 1&lt;/sup&gt; + &amp;middot;&amp;middot;&amp;middot; + 2&lt;sup&gt;0&lt;/sup&gt;&lt;/i&gt;. This is the sum of a geometric series with the well known solution &lt;i&gt;2&lt;sup&gt;n&lt;/sup&gt; - 1&lt;/i&gt;(use induction to establish that last result or more directly, just compute &lt;i&gt;2T(n) - T(n)&lt;/i&gt;). And so, the time complexity (the number of disk moves needed) for &lt;i&gt;n&lt;/i&gt; disks is &lt;i&gt;T(n) = 2&lt;sup&gt;n&lt;/sup&gt; - 1&lt;/i&gt;. &lt;/p&gt;    &lt;hr/&gt;   &lt;p&gt;     References:&lt;br/&gt;     &lt;cite&gt;Algorithms and Data Structures Design, Correctness, Analysis&lt;/cite&gt; by Jeffrey Kingston, 2nd ed. 1998    &lt;/p&gt;  &lt;/body&gt;&lt;/html&gt;</content><category scheme="http://www.blogger.com/atom/ns#" term="OCaml"/><category scheme="http://www.blogger.com/atom/ns#" term="Algorithmic complexity"/><id>tag:blogger.com,1999:blog-5012565255225108517.post-2688716903670987691</id><title type="text">Towers of Hanoi</title><updated>2017-11-12T13:24:03-00:00</updated><author><email>noreply@blogger.com</email><uri>https://plus.google.com/104436573144909855029</uri><name>Shayne Fletcher</name></author></entry><entry><source><updated>2018-07-10T00:00:00-00:00</updated><logo>http://caml.inria.fr//pub/logos/caml-inria-fr.128x58.gif</logo><link title="The Caml Language" type="text/html" href="http://caml.inria.fr/" rel="related"/><link title="The Caml Language" type="application/rss+xml" href="http://caml.inria.fr/news.en.rss" rel="self"/><id>http://caml.inria.fr/</id><title type="text">The Caml Language</title><author><name>Caml INRIA</name></author></source><link href="http://caml.inria.fr/pub/distrib/ocaml-4.06/" rel="alternate"/><id>http://caml.inria.fr/pub/distrib/ocaml-4.06/#b8fb05da89ee1d6e72c68a827d4167fd</id><title type="text">OCaml 4.06.0 released</title><updated>2017-11-03T00:00:00-00:00</updated><author><name>Caml INRIA</name></author></entry><entry><source><updated>2017-12-14T00:00:00-00:00</updated><link title="OCaml Labs" type="text/html" href="https://ocamllabs.github.io//" rel="related"/><link title="OCaml Labs" type="application/rss+xml" href="http://ocamllabs.io/feed.xml" rel="self"/><generator>Jekyll v3.6.2</generator><id>https://ocamllabs.github.io//</id><title type="text">OCaml Labs</title><author><name>OCaml Labs</name></author></source><link href="https://ocamllabs.github.io//general/2017/10/30/WindowsUnicode.html" rel="alternate"/><content xml:base="http://ocamllabs.io/feed.xml" type="html">&lt;p&gt;(Only) 12 years after the initial Mantis issues - and with thanks to a huge community effort - we now have Windows support in the OCaml 4.06.0 release candidate! Read more in David’s &lt;a href=&quot;http://www.dra27.uk/blog/platform/2017/10/30/ocaml-unicode.html&quot;&gt;detailed blog post&lt;/a&gt; and follow the conversation on our &lt;a href=&quot;https://discuss.ocaml.org/t/windows-unicode-support-in-ocaml-4-06-0/1034&quot;&gt;Discuss forum&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;
</content><category term="General"/><id>https://ocamllabs.github.io//general/2017/10/30/WindowsUnicode.html</id><title type="text">Windows Unicode Support - A Bug-Fix 12 Years in the Making</title><updated>2017-10-30T00:00:00-00:00</updated><author><name>OCaml Labs</name></author></entry></feed>